{
	"info": {
		"_postman_id": "3ec94bd0-0088-426e-82f3-c67a45bad761",
		"name": "NSEInvest API Realease",
		"description": "NSE Invest API details for Member\n\n**version 2**",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "1305012",
		"_collection_link": "https://icexmf.postman.co/workspace/nsemf2~c316ecde-9bea-4df2-8b38-54affd2f58c0/collection/1305012-3ec94bd0-0088-426e-82f3-c67a45bad761?action=share&source=collection_link&creator=1305012"
	},
	"item": [
		{
			"name": "Order Entry (PUR/RED) Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"transaction_details\": [\n        {\n            \"order_ref_number\": \"\",\n            \"scheme_code\": \"AXBDGP-GR\",\n            \"trxn_type\": \"P\",\n            \"buy_sell_type\": \"FRESH\",\n            \"client_code\": \"K0281\",\n            \"demat_physical\": \"C\",\n            \"order_amount\": \"2000\",\n            \"folio_no\": \"\",\n            \"remarks\": \"Add through API\",\n            \"kyc_flag\": \"Y\",\n            \"sub_broker_code\": \"\",\n            \"euin_number\": \"E123456\",\n            \"euin_declaration\": \"Y\",\n            \"min_redemption_flag\": \"N\",\n            \"dpc_flag\": \"Y\",\n            \"all_units\": \"N\",\n            \"redemption_units\": \"\",\n            \"sub_broker_arn\": \"\",\n            \"bank_ref_no\": \"5434232\",\n            \"account_no\": \"3110006522\",\n            \"mobile_no\": \"\",\n            \"email\": \"\",\n            \"mandate_id\":\"\"\n        }\n    ]\n}"
				},
				"url": "{{url}}/nsemfdesk/api/v2/transaction/NORMAL",
				"description": "Create new Purchase or Redemption Order."
			},
			"response": [
				{
					"name": "Client does not exist",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							},
							{
								"key": "memberId",
								"value": "{{member_code}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transaction_details\": [\n        {\n            \"order_ref_number\": \"\",\n            \"scheme_code\": \"AXBDGP-GR\",\n            \"trxn_type\": \"P\",\n            \"buy_sell_type\": \"FRESH\",\n            \"client_code\": \"K0281\",\n            \"demat_physical\": \"C\",\n            \"order_amount\": \"2000\",\n            \"folio_no\": \"\",\n            \"remarks\": \"Add through API\",\n            \"kyc_flag\": \"Y\",\n            \"sub_broker_code\": \"\",\n            \"euin_number\": \"E123456\",\n            \"euin_declaration\": \"Y\",\n            \"min_redemption_flag\": \"N\",\n            \"dpc_flag\": \"Y\",\n            \"all_units\": \"N\",\n            \"redemption_units\": \"\",\n            \"sub_broker_arn\": \"\",\n            \"bank_ref_no\": \"5434232\",\n            \"account_no\": \"343434334\",\n            \"mobile_no\": \"\",\n            \"email\": \"\",\n            \"mandate_id\":\"\"\n        }\n    ]\n}"
						},
						"url": "{{url}}/nsemfdesk/api/{{version}}/transaction/NORMAL"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Fri, 26 Apr 2024 12:29:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"transaction_details\": [\n        {\n            \"order_ref_number\": \" \",\n            \"scheme_code\": \"AXBDGP-GR\",\n            \"trxn_type\": \"P\",\n            \"buy_sell_type\": \"FRESH\",\n            \"client_code\": \"H30350\",\n            \"demat_physical\": \"C\",\n            \"order_amount\": \"2000\",\n            \"folio_no\": \" \",\n            \"remarks\": \"ADD THROUGH API\",\n            \"kyc_flag\": \"Y\",\n            \"sub_broker_code\": \" \",\n            \"euin_number\": \"E123456\",\n            \"euin_declaration\": \"Y\",\n            \"min_redemption_flag\": \"N\",\n            \"dpc_flag\": \"Y\",\n            \"all_units\": \"N\",\n            \"redemption_units\": \" \",\n            \"sub_broker_arn\": \" \",\n            \"bank_ref_no\": \"5434232\",\n            \"account_no\": \"343434334\",\n            \"mobile_no\": \" \",\n            \"email\": \" \",\n            \"mandate_id\": \" \",\n            \"trxn_order_id\": \"0\",\n            \"trxn_status\": \"TRXN FAILED\",\n            \"trxn_remark\": \"Client does not exist.\",\n            \"filler1\": \"\"\n        }\n    ]\n}"
				},
				{
					"name": "success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "memberId",
								"value": "{{member_code}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transaction_details\": [\n        {\n            \"order_ref_number\": \"\",\n            \"scheme_code\": \"AXBDGP-GR\",\n            \"trxn_type\": \"P\",\n            \"buy_sell_type\": \"FRESH\",\n            \"client_code\": \"K0281\",\n            \"demat_physical\": \"C\",\n            \"order_amount\": \"2000\",\n            \"folio_no\": \"\",\n            \"remarks\": \"Add through API\",\n            \"kyc_flag\": \"Y\",\n            \"sub_broker_code\": \"\",\n            \"euin_number\": \"E123456\",\n            \"euin_declaration\": \"Y\",\n            \"min_redemption_flag\": \"N\",\n            \"dpc_flag\": \"Y\",\n            \"all_units\": \"N\",\n            \"redemption_units\": \"\",\n            \"sub_broker_arn\": \"\",\n            \"bank_ref_no\": \"5434232\",\n            \"account_no\": \"3110006522\",\n            \"mobile_no\": \"\",\n            \"email\": \"\",\n            \"mandate_id\":\"\"\n        }\n    ]\n}"
						},
						"url": "{{url}}/nsemfdesk/api/{{version}}/transaction/NORMAL"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Fri, 07 Feb 2025 09:02:05 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"transaction_details\": [\n        {\n            \"order_ref_number\": \" \",\n            \"scheme_code\": \"AXBDGP-GR\",\n            \"trxn_type\": \"P\",\n            \"buy_sell_type\": \"FRESH\",\n            \"client_code\": \"K0281\",\n            \"demat_physical\": \"C\",\n            \"order_amount\": \"2000\",\n            \"folio_no\": \" \",\n            \"remarks\": \"ADD THROUGH API\",\n            \"kyc_flag\": \"Y\",\n            \"sub_broker_code\": \" \",\n            \"euin_number\": \"E123456\",\n            \"euin_declaration\": \"Y\",\n            \"min_redemption_flag\": \"N\",\n            \"dpc_flag\": \"Y\",\n            \"all_units\": \"N\",\n            \"redemption_units\": \" \",\n            \"sub_broker_arn\": \" \",\n            \"bank_ref_no\": \"5434232\",\n            \"account_no\": \"3110006522\",\n            \"mobile_no\": \" \",\n            \"email\": \" \",\n            \"mandate_id\": \" \",\n            \"trxn_order_id\": \"450380000343\",\n            \"trxn_status\": \"TRXN SUCCESS\",\n            \"trxn_remark\": \" \",\n            \"filler1\": \"\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Switch Order Entry Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"transaction_details\": [\n\t\t{\n\t\t\t\"order_ref_number\": \"\",\n\t\t\t\"from_scheme_code\": \"AXEFGP-GR\",\n\t\t\t\"to_scheme_code\": \"AXMLGP-GR\",\n\t\t\t\"buy_sell_type\": \"FRESH\",\n\t\t\t\"client_code\": \"K0281\",\n\t\t\t\"demat_physical\": \"C\",\n\t\t\t\"amount\": \"\",\n\t\t\t\"units\": \"10.000\",\n\t\t\t\"all_units\": \"N\",\n\t\t\t\"folio_no\": \"\",\n\t\t\t\"remarks\": \"remarks\",\n\t\t\t\"kyc_flag\": \"Y\",\n\t\t\t\"sub_broker_code\": \"UCC4790\",\n\t\t\t\"euin_number\": \"E123456\",\n\t\t\t\"euin_declaration\": \"Y\",\n\t\t\t\"sub_broker_arn\": \"\",\n\t\t\t\"mobile_no\": \"\",\n\t\t\t\"email\": \"\",\n\t\t\t\"filler1\": \"\",\n\t\t\t\"filler2\": \"\",\n\t\t\t\"filler3\": \"\"\n\t\t}\n\t]\n}"
				},
				"url": "{{url}}/nsemfdesk/api/v2/transaction/SWITCH",
				"description": "Create new Switch Order."
			},
			"response": [
				{
					"name": "success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "memberId",
								"value": "{{member_code}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"transaction_details\": [\n\t\t{\n\t\t\t\"order_ref_number\": \"\",\n\t\t\t\"from_scheme_code\": \"AXEFGP-GR\",\n\t\t\t\"to_scheme_code\": \"AXMLGP-GR\",\n\t\t\t\"buy_sell_type\": \"FRESH\",\n\t\t\t\"client_code\": \"K0281\",\n\t\t\t\"demat_physical\": \"C\",\n\t\t\t\"amount\": \"\",\n\t\t\t\"units\": \"10.000\",\n\t\t\t\"all_units\": \"N\",\n\t\t\t\"folio_no\": \"\",\n\t\t\t\"remarks\": \"remarks\",\n\t\t\t\"kyc_flag\": \"Y\",\n\t\t\t\"sub_broker_code\": \"UCC4790\",\n\t\t\t\"euin_number\": \"E123456\",\n\t\t\t\"euin_declaration\": \"Y\",\n\t\t\t\"sub_broker_arn\": \"\",\n\t\t\t\"mobile_no\": \"\",\n\t\t\t\"email\": \"\",\n\t\t\t\"filler1\": \"\",\n\t\t\t\"filler2\": \"\",\n\t\t\t\"filler3\": \"\"\n\t\t}\n\t]\n}"
						},
						"url": "{{url}}/nsemfdesk/api/{{version}}/transaction/SWITCH"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Fri, 07 Feb 2025 09:04:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"transaction_details\": [\n        {\n            \"order_ref_number\": \" \",\n            \"from_scheme_code\": \"AXEFGP-GR\",\n            \"to_scheme_code\": \"AXMLGP-GR\",\n            \"buy_sell_type\": \"FRESH\",\n            \"client_code\": \"K0281\",\n            \"demat_physical\": \"C\",\n            \"amount\": \" \",\n            \"units\": \"10.000\",\n            \"all_units\": \"N\",\n            \"folio_no\": \" \",\n            \"remarks\": \"REMARKS\",\n            \"kyc_flag\": \"Y\",\n            \"sub_broker_code\": \"UCC4790\",\n            \"euin_number\": \"E123456\",\n            \"euin_declaration\": \"Y\",\n            \"sub_broker_arn\": \" \",\n            \"trxn_so_order_id\": \"450380000344\",\n            \"trxn_si_order_id\": \"450380000345\",\n            \"trxn_status\": \"TRXN SUCCESS\",\n            \"trxn_remark\": \" \",\n            \"mobile_no\": \" \",\n            \"email\": \" \",\n            \"filler1\": \" \",\n            \"filler2\": \" \",\n            \"filler3\": \" \"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "XSIP Registration Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"reg_data\": [\n        {\n            \"amc_code\": \"AXISMUTUALFUND_MF\",\n            \"sch_code\": \"AXIOGP-GR\",\n            \"client_code\": \"K0281\",\n            \"bank_ref_no\": \"671297212\",\n            \"trans_mode\": \"D\",\n            \"dp_txn_mode\": \"C\",\n            \"start_date\": \"08/02/2025\",\n            \"frequency_type\": \"MONTHLY\",\n            \"frequency_allowed\": \"1\",\n            \"installment_amount\": \"3000\",\n            \"status\": \"1\",\n            \"member_code\": \"4079\",\n            \"folio_no\": \"\",\n            \"sip_remarks\": \"\",\n            \"installment_no\": \"12\",\n            \"convenience_fee\": \"10\",\n            \"xsip_mandate_id\": \"12\",\n            \"sub_broker_code\": \"\",\n            \"euin_number\": \"E399871\",\n            \"euin_declaration\": \"Y\",\n            \"dpc_flag\": \"Y\",\n            \"first_order_today\": \"N\",\n            \"isip_mandate\": \"\",\n            \"sub_broker_arn\": \"\",\n            \"end_date\": \"\",\n            \"primary_holder_mobile\": \"9574898779\",\n            \"primary_holder_email\": \"user@gmail.com\",\n                \"step_up_required\": \"Y\",\n                \"step_up_start_date\": \"10/05/2025\",\n                \"step_up_end_date\": \"\",\n                \"step_up_frequency\": \"semi-annual\",\n                \"step_up_amout\": \"500\",\n            \"filler_1\": \"\",\n            \"filler_2\": \"\",\n            \"filler_3\": \"\",\n            \"filler_4\": \"\",\n            \"filler_5\": \"\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/product/XSIP",
				"description": "Register new Xsip."
			},
			"response": []
		},
		{
			"name": "(X)SIP Topup Registration Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}\n\"reg_data\": [\n    {\n        \"client_code\": \"K0281\",\n        \"req_type\": \"SIP\",\n        \"sip_reg_no\": 202412021000001,\n        \"installment_amount\": 1000,\n        \"topup_frequency\": \"ANNUALLY\",\n        \"topup_amount\": 500,\n        \"start_date\": \"05/12/2024\",\n        \"end_date\": \"05/12/2025\",\n        \"internal_ref_no\": \"\",\n        \"primary_holder_mobile\": \"9574898779\",\n        \"primary_holder_email\": \"user@gmail.com\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/product/SIP_TOPUP",
				"description": "Register Topup on Xsip."
			},
			"response": []
		},
		{
			"name": "SIP Registration Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"reg_data\": [\n\t\t{\n\t\t\t\"amc_code\": \"AXISMUTUALFUND_MF\",\n\t\t\t\"sch_code\": \"AXIOGP-GR\",\n\t\t\t\"client_code\": \"K0281\",\n\t\t\t\"internal_ref_no\": \"671297212\",\n\t\t\t\"trans_mode\": \"D\",\n\t\t\t\"dp_txn_mode\": \"C\",\n\t\t\t\"start_date\": \"08/02/2025\",\n\t\t\t\"frequency_type\": \"MONTHLY\",\n\t\t\t\"frequency_allowed\": \"1\",\n\t\t\t\"installment_amount\": \"3000\",\n\t\t\t\"status\": \"1\",\n\t\t\t\"member_code\": \"00001\",\n\t\t\t\"folio_no\": \"\",\n\t\t\t\"sip_remarks\": \"\",\n\t\t\t\"installment_no\": \"12\",\n\t\t\t\"sip_mandate_id\": \"12\",\n\t\t\t\"sub_broker_code\": \"\",\n\t\t\t\"euin_number\": \"E399871\",\n\t\t\t\"euin_declaration\": \"Y\",\n\t\t\t\"dpc_flag\": \"Y\",\n\t\t\t\"first_order_today\": \"N\",\n\t\t\t\"sub_broker_arn\": \"\",\n\t\t\t\"end_date\": \"\",\n\t\t\t\"primary_holder_mobile\": \"9574898779\",\n\t\t\t\"primary_holder_email\": \"user@gmail.com\",\n                \"step_up_required\": \"Y\",\n                \"step_up_start_date\": \"10/05/2025\",\n                \"step_up_end_date\": \"\",\n                \"step_up_frequency\": \"semi-annual\",\n                \"step_up_amout\": \"500\",\n\t\t\t\"filler_1\": \"\",\n\t\t\t\"filler_2\": \"\",\n\t\t\t\"filler_3\": \"\",\n\t\t\t\"filler_4\": \"\",\n\t\t\t\"filler_5\": \"\"\n\t\t}\n\t]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/product/SIP"
			},
			"response": [
				{
					"name": "success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "memberId",
								"value": "{{member_code}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"reg_data\": [\n\t\t{\n\t\t\t\"amc_code\": \"AXISMUTUALFUND_MF\",\n\t\t\t\"sch_code\": \"AXIOGP-GR\",\n\t\t\t\"client_code\": \"K0281\",\n\t\t\t\"internal_ref_no\": \"671297212\",\n\t\t\t\"trans_mode\": \"D\",\n\t\t\t\"dp_txn_mode\": \"C\",\n\t\t\t\"start_date\": \"08/02/2025\",\n\t\t\t\"frequency_type\": \"MONTHLY\",\n\t\t\t\"frequency_allowed\": \"1\",\n\t\t\t\"installment_amount\": \"3000\",\n\t\t\t\"status\": \"1\",\n\t\t\t\"member_code\": \"00001\",\n\t\t\t\"folio_no\": \"\",\n\t\t\t\"sip_remarks\": \"\",\n\t\t\t\"installment_no\": \"12\",\n\t\t\t\"sip_mandate_id\": \"12\",\n\t\t\t\"sub_broker_code\": \"\",\n\t\t\t\"euin_number\": \"E399871\",\n\t\t\t\"euin_declaration\": \"Y\",\n\t\t\t\"dpc_flag\": \"Y\",\n\t\t\t\"first_order_today\": \"N\",\n\t\t\t\"sub_broker_arn\": \"\",\n\t\t\t\"end_date\": \"\",\n\t\t\t\"primary_holder_mobile\": \"9574898779\",\n\t\t\t\"primary_holder_email\": \"user@gmail.com\",\n\t\t\t\"filler_1\": \"\",\n\t\t\t\"filler_2\": \"\",\n\t\t\t\"filler_3\": \"\",\n\t\t\t\"filler_4\": \"\",\n\t\t\t\"filler_5\": \"\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/nsemfdesk/api/{{version}}/registration/product/SIP"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Fri, 07 Feb 2025 09:07:50 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"reg_data\": [\n        {\n            \"amc_code\": \"AXISMUTUALFUND_MF\",\n            \"sch_code\": \"AXIOGP-GR\",\n            \"client_code\": \"K0281\",\n            \"internal_ref_no\": \"671297212\",\n            \"trans_mode\": \"D\",\n            \"dp_txn_mode\": \"C\",\n            \"start_date\": \"08/02/2025\",\n            \"frequency_type\": \"MONTHLY\",\n            \"frequency_allowed\": \"1\",\n            \"installment_amount\": \"3000\",\n            \"status\": \"1\",\n            \"member_code\": \"00001\",\n            \"folio_no\": \" \",\n            \"sip_remarks\": \" \",\n            \"installment_no\": \"12\",\n            \"first_order_today\": \"N\",\n            \"sub_broker_code\": \" \",\n            \"euin_number\": \"E399871\",\n            \"euin_declaration\": \"Y\",\n            \"dpc_flag\": \"Y\",\n            \"sub_broker_arn\": \" \",\n            \"end_date\": \" \",\n            \"primary_holder_mobile\": \"9574898779\",\n            \"primary_holder_email\": \"USER@GMAIL.COM\",\n            \"filler_1\": \" \",\n            \"filler_2\": \" \",\n            \"filler_3\": \" \",\n            \"filler_4\": \" \",\n            \"filler_5\": \" \",\n            \"reg_id\": \"202502071000015\",\n            \"reg_status\": \"REG_SUCCESS\",\n            \"reg_remark\": \" \"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "STP Registration Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"reg_data\": \n    [\n\t    {\n\t\t\t\"client_code\": \"H30350\",\n\t\t\t\"from_scheme_code\": \"PSAD-DR\",\n\t\t\t\"to_scheme_code\": \"PSAG-GR\",\n\t\t\t\"buy_sell_type\": \"Additional\",\n\t\t\t\"transaction_mode\": \"C\",\n\t\t\t\"folio_no\": \" \",\n\t\t\t\"internal_ref_number\": \"STP374698\",\n\t\t\t\"start_date\": \"28/08/2023\",\n\t\t\t\"frequency_type\": \"Monthly\",\n\t\t\t\"no_of_transfers\": \"12\",\n\t\t\t\"to_date\": \"\",\n\t\t\t\"installment_amount\": \"\",\n\t\t\t\"installment_units\": \"10\",\n\t\t\t\"first_order_today\": \"Y\",\n\t\t\t\"sub_broker_code\": \"24542\",\n\t\t\t\"euin_declaration\": \"Y\",\n\t\t\t\"euin_number\": \"E123456\",\n\t\t\t\"remarks\": \"\",\n\t\t\t\"sub_broker_arn_code\": \"\",\n\t\t\t\"mobile\": \"9892837654\",\n\t\t\t\"email\": \"test@gmail.com\"\n\t\t}\n\t]\n}"
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/product/STP"
			},
			"response": []
		},
		{
			"name": "SWP Registration Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"reg_data\": [\n        {\n            \"client_code\": \"K102\",\n            \"scheme_code\": \"BS41A-DP\",\n            \"trans_mode\": \"D\",\n            \"folio_no\": \"9105208524\",\n            \"internal_ref_no\": \"SWP111112\",\n            \"start_date\": \"28/08/2023\",\n            \"no_of_withdrawals\": \"12\",\n            \"frequency_type\": \"Monthly\",\n            \"installmenamount\": \"5000\",\n            \"installment_units\": \"100\",\n            \"first_order_today\": \"N\",\n            \"sub_broker_code\": \"1461\",\n            \"euin_declaration\": \"Y\",\n            \"euin_number\": \"E213200\",\n            \"remarks\": \"\",\n            \"sub_broker_arn\": \"\",\n            \"mobile\": \"9909011973\",\n            \"email\": \"ashit.rana@njgroup.in\",\n            \"account_no\": \"0226564545\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/product/SWP"
			},
			"response": []
		},
		{
			"name": "Order Cancellation ( Normal / Switch ) Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"can_data\": [\n        {\n            \"client_code\": \"4100030\",\n            \"order_no\": \"433120000008\",\n            \"remarks\": \"switch cancel 433110000018\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/cancellation/ORDER_CAN"
			},
			"response": []
		},
		{
			"name": "UCC Registration Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"reg_details\": [\n        {\n            \"client_code\": \"K0281\",\n            \"primary_holder_first_name\": \"KK\",\n            \"primary_holder_middle_name\": \"B\",\n            \"primary_holder_last_name\": \"DESAI\",\n            \"tax_status\": \"01\",\n            \"gender\": \"M\",\n            \"primary_holder_dob_incorporation\": \"03-08-1991\",\n            \"occupation_code\": \"01\",\n            \"holding_nature\": \"JO\",\n            \"second_holder_first_name\": \"SECONFIRST\",\n            \"second_holder_middle_name\": \"SECONDMIDDLE\",\n            \"second_holder_last_name\": \"SECONDLAST\",\n            \"third_holder_first_name\": \"THIRDFIRST\",\n            \"third_holder_middle_name\": \"THIRDMIDDLE\",\n            \"third_holder_last_name\": \"THIRDLAST\",\n            \"second_holder_dob\": \"01/01/1995\",\n            \"third_holder_dob\": \"01/01/1996\",\n            \"guardian_first_name\": \"\",\n            \"guardian_middle_name\": \"\",\n            \"guardian_last_name\": \"\",\n            \"guardian_dob\": \"\",\n            \"primary_holder_pan_exempt\": \"N\",\n            \"second_holder_pan_exempt\": \"N\",\n            \"third_holder_pan_exempt\": \"N\",\n            \"guardian_pan_exempt\": \"N\",\n            \"primary_holder_pan\": \"AAAPA1234A\",\n            \"second_holder_pan\": \"BBBPB1234B\",\n            \"third_holder_pan\": \"CCCPC1234C\",\n            \"guardian_pan\": \"\",\n            \"primary_holder_exempt_category\": \"\",\n            \"second_holder_exempt_category\": \"\",\n            \"third_holder_exempt_category\": \"\",\n            \"guardian_exempt_category\": \"\",\n            \"client_type\": \"D\",\n            \"pms\": \"N\",\n            \"default_dp\": \"NSDL\",\n            \"cdsl_dpid\": \"\",\n            \"cdslcltid\": \"\",\n            \"cmbp_id\": \"12345666\",\n            \"nsdldpid\": \"IN123456\",\n            \"nsdlcltid\": \"12345668\",\n            \"account_type_1\": \"CB\",\n            \"account_no_1\": \"1\",\n            \"micr_no_1\": \"\",\n            \"ifsc_code_1\": \"SBIN0000018\",\n            \"default_bank_flag_1\": \"N\",\n            \"account_type_2\": \"SB\",\n            \"account_no_2\": \"22\",\n            \"micr_no_2\": \"\",\n            \"ifsc_code_2\": \"SBIN0000018\",\n            \"default_bank_flag_2\": \"Y\",\n            \"account_type_3\": \"\",\n            \"account_no_3\": \"\",\n            \"micr_no_3\": \"\",\n            \"ifsc_code_3\": \"\",\n            \"default_bank_flag_3\": \"\",\n            \"account_type_4\": \"\",\n            \"account_no_4\": \"\",\n            \"micr_no_4\": \"\",\n            \"ifsc_code_4\": \"\",\n            \"default_bank_flag_4\": \"\",\n            \"account_type_5\": \"\",\n            \"account_no_5\": \"\",\n            \"micr_no_5\": \"\",\n            \"ifsc_code_5\": \"\",\n            \"default_bank_flag_5\": \"\",\n            \"cheque_name\": \"MY CHEQUE NAME\",\n            \"div_pay_mode\": \"01\",\n            \"address_1\": \"ADDRESS_1\",\n            \"address_2\": \"ADDRESS_2\",\n            \"address_3\": \"ADDRESS_3\",\n            \"city\": \"MUMBAI\",\n            \"state\": \"MA\",\n            \"pincode\": \"400008\",\n            \"country\": \"INDIA\",\n            \"resi_phone\": \"123123123\",\n            \"resi_fax\": \"321321321\",\n            \"office_phone\": \"789789789\",\n            \"office_fax\": \"987987987\",\n            \"email\": \"ABC@XYZ.COM\",\n            \"communication_mode\": \"E\",\n            \"foreign_address_1\": \"\",\n            \"foreign_address_2\": \"\",\n            \"foreign_address_3\": \"\",\n            \"foreign_address_city\": \"\",\n            \"foreign_address_pincode\": \"\",\n            \"foreign_address_state\": \"\",\n            \"foreign_address_country\": \"\",\n            \"foreign_address_resi_phone\": \"\",\n            \"foreign_address_fax\": \"\",\n            \"foreign_address_off_phone\": \"\",\n            \"foreign_address_off_fax\": \"\",\n            \"indian_mobile_no\": \"9876543210\",\n            \"nominee_1_name\": \"NOMINEE 1 NAME\",\n            \"nominee_1_relationship\": \"MOTHER\",\n            \"nominee_1_applicable\": \"100\",\n            \"nominee_1_minor_flag\": \"N\",\n            \"nominee_1_dob\": \"\",\n            \"nominee_1_guardian\": \"\",\n            \"nominee_2_name\": \"\",\n            \"nominee_2_relationship\": \"\",\n            \"nominee_2_applicable\": \"\",\n            \"nominee_2_dob\": \"\",\n            \"nominee_2_minor_flag\": \"\",\n            \"nominee_2_guardian\": \"\",\n            \"nominee_3_name\": \"\",\n            \"nominee_3_relationship\": \"\",\n            \"nominee_3_applicable\": \"\",\n            \"nominee_3_dob\": \"\",\n            \"nominee_3_minor_flag\": \"\",\n            \"nominee_3_guardian\": \"\",\n            \"primary_holder_kyc_type\": \"C\",\n            \"primary_holder_ckyc_number\": \"1234567891\",\n            \"second_holder_kyc_type\": \"K\",\n            \"second_holder_ckyc_number\": \"\",\n            \"third_holder_kyc_type\": \"\",\n            \"third_holder_ckyc_number\": \"\",\n            \"guardian_kyc_type\": \"\",\n            \"guardian_ckyc_number\": \"\",\n            \"primary_holder_kra_exempt_ref_no\": \"\",\n            \"second_holder_kra_exempt_ref_no\": \"\",\n            \"third_holder_kra_exempt_ref_no\": \"\",\n            \"guardian_exempt_ref_no\": \"\",\n            \"aadhaar_updated\": \"Y\",\n            \"mapin_id\": \"1234567887654320\",\n            \"paperless_flag\": \"Z\",\n            \"lei_no\": \"1234567890abcdpefdsa\",\n            \"lei_validity\": \"20/05/2025\",\n            \"mobile_declaration_flag\": \"SE\",\n            \"email_declaration_flag\": \"SE\",\n            \"nomination_opt\": \"Y\",\n            \"nomination_authentication\": \"O\",\n            \"nominee_1_pan\": \"ASKPD2345A\",\n            \"nominee_1_guardian_pan\": \"ASKPP2345A\",\n            \"nominee_2_pan\": \"ASKPP2345A\",\n            \"nominee_2_guardian_pan\": \"ASKPP2345A\",\n            \"nominee_3_pan\": \"ASKPP2345A\",\n            \"nominee_3_guardian_pan\": \"ASKPP2345A\",\n            \"second_holder_email\": \"xyz@gmail.com\",\n            \"second_holder_email_declaration\": \"SE\",\n            \"second_holder_mobile\": \"9823456723\",\n            \"second_holder_mobile declaration\": \"SE\",\n            \"third_holder_email\": \"xyz@gmail.com\",\n            \"third_holder_email_declaration\": \"SE\",\n            \"third_holder_mobile\": \"9823456723\",\n            \"third_holder_mobile_declaration\": \"SE\",\n            \"reg_id\": \"\",\n            \"reg_status\": \"\",\n            \"reg_remark\": \"\",\n            \"consent_flag\": \"\"\n        }\n    ]\n}"
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/CLIENTCOMMON"
			},
			"response": [
				{
					"name": "success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "memberId",
								"value": "{{member_code}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reg_details\": [\n        {\n            \"client_code\": \"K0281\",\n            \"primary_holder_first_name\": \"KK\",\n            \"primary_holder_middle_name\": \"B\",\n            \"primary_holder_last_name\": \"DESAI\",\n            \"tax_status\": \"01\",\n            \"gender\": \"M\",\n            \"primary_holder_dob_incorporation\": \"03-08-1991\",\n            \"occupation_code\": \"01\",\n            \"holding_nature\": \"JO\",\n            \"second_holder_first_name\": \"SECONFIRST\",\n            \"second_holder_middle_name\": \"SECONDMIDDLE\",\n            \"second_holder_last_name\": \"SECONDLAST\",\n            \"third_holder_first_name\": \"THIRDFIRST\",\n            \"third_holder_middle_name\": \"THIRDMIDDLE\",\n            \"third_holder_last_name\": \"THIRDLAST\",\n            \"second_holder_dob\": \"01/01/1995\",\n            \"third_holder_dob\": \"01/01/1996\",\n            \"guardian_first_name\": \"\",\n            \"guardian_middle_name\": \"\",\n            \"guardian_last_name\": \"\",\n            \"guardian_dob\": \"\",\n            \"primary_holder_pan_exempt\": \"N\",\n            \"second_holder_pan_exempt\": \"N\",\n            \"third_holder_pan_exempt\": \"N\",\n            \"guardian_pan_exempt\": \"N\",\n            \"primary_holder_pan\": \"AAAPA1234A\",\n            \"second_holder_pan\": \"BBBPB1234B\",\n            \"third_holder_pan\": \"CCCPC1234C\",\n            \"guardian_pan\": \"\",\n            \"primary_holder_exempt_category\": \"\",\n            \"second_holder_exempt_category\": \"\",\n            \"third_holder_exempt_category\": \"\",\n            \"guardian_exempt_category\": \"\",\n            \"client_type\": \"D\",\n            \"pms\": \"N\",\n            \"default_dp\": \"NSDL\",\n            \"cdsl_dpid\": \"\",\n            \"cdslcltid\": \"\",\n            \"cmbp_id\": \"12345666\",\n            \"nsdldpid\": \"IN123456\",\n            \"nsdlcltid\": \"12345668\",\n            \"account_type_1\": \"CB\",\n            \"account_no_1\": \"1\",\n            \"micr_no_1\": \"\",\n            \"ifsc_code_1\": \"SBIN0000018\",\n            \"default_bank_flag_1\": \"N\",\n            \"account_type_2\": \"SB\",\n            \"account_no_2\": \"22\",\n            \"micr_no_2\": \"\",\n            \"ifsc_code_2\": \"SBIN0000018\",\n            \"default_bank_flag_2\": \"Y\",\n            \"account_type_3\": \"\",\n            \"account_no_3\": \"\",\n            \"micr_no_3\": \"\",\n            \"ifsc_code_3\": \"\",\n            \"default_bank_flag_3\": \"\",\n            \"account_type_4\": \"\",\n            \"account_no_4\": \"\",\n            \"micr_no_4\": \"\",\n            \"ifsc_code_4\": \"\",\n            \"default_bank_flag_4\": \"\",\n            \"account_type_5\": \"\",\n            \"account_no_5\": \"\",\n            \"micr_no_5\": \"\",\n            \"ifsc_code_5\": \"\",\n            \"default_bank_flag_5\": \"\",\n            \"cheque_name\": \"MY CHEQUE NAME\",\n            \"div_pay_mode\": \"01\",\n            \"address_1\": \"ADDRESS_1\",\n            \"address_2\": \"ADDRESS_2\",\n            \"address_3\": \"ADDRESS_3\",\n            \"city\": \"MUMBAI\",\n            \"state\": \"MA\",\n            \"pincode\": \"400008\",\n            \"country\": \"INDIA\",\n            \"resi_phone\": \"123123123\",\n            \"resi_fax\": \"321321321\",\n            \"office_phone\": \"789789789\",\n            \"office_fax\": \"987987987\",\n            \"email\": \"ABC@XYZ.COM\",\n            \"communication_mode\": \"E\",\n            \"foreign_address_1\": \"\",\n            \"foreign_address_2\": \"\",\n            \"foreign_address_3\": \"\",\n            \"foreign_address_city\": \"\",\n            \"foreign_address_pincode\": \"\",\n            \"foreign_address_state\": \"\",\n            \"foreign_address_country\": \"\",\n            \"foreign_address_resi_phone\": \"\",\n            \"foreign_address_fax\": \"\",\n            \"foreign_address_off_phone\": \"\",\n            \"foreign_address_off_fax\": \"\",\n            \"indian_mobile_no\": \"9876543210\",\n            \"nominee_1_name\": \"NOMINEE 1 NAME\",\n            \"nominee_1_relationship\": \"KISHAN M PRAJAPATI MADHI SURAT\",\n            \"nominee_1_applicable\": \"100\",\n            \"nominee_1_minor_flag\": \"N\",\n            \"nominee_1_dob\": \"\",\n            \"nominee_1_guardian\": \"\",\n            \"nominee_2_name\": \"\",\n            \"nominee_2_relationship\": \"\",\n            \"nominee_2_applicable\": \"\",\n            \"nominee_2_dob\": \"\",\n            \"nominee_2_minor_flag\": \"\",\n            \"nominee_2_guardian\": \"\",\n            \"nominee_3_name\": \"\",\n            \"nominee_3_relationship\": \"\",\n            \"nominee_3_applicable\": \"\",\n            \"nominee_3_dob\": \"\",\n            \"nominee_3_minor_flag\": \"\",\n            \"nominee_3_guardian\": \"\",\n            \"primary_holder_kyc_type\": \"C\",\n            \"primary_holder_ckyc_number\": \"1234567891\",\n            \"second_holder_kyc_type\": \"K\",\n            \"second_holder_ckyc_number\": \"\",\n            \"third_holder_kyc_type\": \"\",\n            \"third_holder_ckyc_number\": \"\",\n            \"guardian_kyc_type\": \"\",\n            \"guardian_ckyc_number\": \"\",\n            \"primary_holder_kra_exempt_ref_no\": \"\",\n            \"second_holder_kra_exempt_ref_no\": \"\",\n            \"third_holder_kra_exempt_ref_no\": \"\",\n            \"guardian_exempt_ref_no\": \"\",\n            \"aadhaar_updated\": \"Y\",\n            \"mapin_id\": \"1234567887654320\",\n            \"paperless_flag\": \"Z\",\n            \"lei_no\": \"1234567890abcdpefdsa\",\n            \"lei_validity\": \"20/05/2025\",\n            \"mobile_declaration_flag\": \"SE\",\n            \"email_declaration_flag\": \"SE\",\n            \"nomination_opt\": \"Y\",\n            \"nomination_authentication\": \"O\",\n            \"nominee_1_pan\": \"ASKPD2345A\",\n            \"nominee_1_guardian_pan\": \"ASKPP2345A\",\n            \"nominee_2_pan\": \"ASKPP2345A\",\n            \"nominee_2_guardian_pan\": \"ASKPP2345A\",\n            \"nominee_3_pan\": \"ASKPP2345A\",\n            \"nominee_3_guardian_pan\": \"ASKPP2345A\",\n            \"second_holder_email\": \"xyz@gmail.com\",\n            \"second_holder_email_declaration\": \"SE\",\n            \"second_holder_mobile\": \"9823456723\",\n            \"second_holder_mobile declaration\": \"{{second_holder_mobile declaration}}\",\n            \"third_holder_email\": \"xyz@gmail.com\",\n            \"third_holder_email_declaration\": \"SE\",\n            \"third_holder_mobile\": \"9823456723\",\n            \"third_holder_mobile_declaration\": \"SE\",\n            \"reg_id\": \"\",\n            \"reg_status\": \"\",\n            \"reg_remark\": \"\",\n            \"consent_flag\": \"\"\n        }\n    ]\n}"
						},
						"url": "{{url}}/nsemfdesk/api/{{version}}/registration/CLIENTCOMMON"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Fri, 26 Apr 2024 12:29:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"reg_details\": [\n        {\n            \"client_code\": \"K0281\",\n            \"primary_holder_first_name\": \"KK\",\n            \"primary_holder_middle_name\": \"B\",\n            \"primary_holder_last_name\": \"DESAI\",\n            \"tax_status\": \"01\",\n            \"gender\": \"M\",\n            \"primary_holder_dob_incorporation\": \"03-08-1991\",\n            \"occupation_code\": \"01\",\n            \"holding_nature\": \"JO\",\n            \"second_holder_first_name\": \"SECONFIRST\",\n            \"second_holder_middle_name\": \"SECONDMIDDLE\",\n            \"second_holder_last_name\": \"SECONDLAST\",\n            \"third_holder_first_name\": \"THIRDFIRST\",\n            \"third_holder_middle_name\": \"THIRDMIDDLE\",\n            \"third_holder_last_name\": \"THIRDLAST\",\n            \"second_holder_dob\": \"01/01/1995\",\n            \"third_holder_dob\": \"01/01/1996\",\n            \"guardian_first_name\": \" \",\n            \"guardian_middle_name\": \" \",\n            \"guardian_last_name\": \" \",\n            \"guardian_dob\": \" \",\n            \"primary_holder_pan_exempt\": \"N\",\n            \"second_holder_pan_exempt\": \"N\",\n            \"third_holder_pan_exempt\": \"N\",\n            \"guardian_pan_exempt\": \"N\",\n            \"primary_holder_pan\": \"AAAPA1234A\",\n            \"second_holder_pan\": \"BBBPB1234B\",\n            \"third_holder_pan\": \"CCCPC1234C\",\n            \"guardian_pan\": \" \",\n            \"primary_holder_exempt_category\": \" \",\n            \"second_holder_exempt_category\": \" \",\n            \"third_holder_exempt_category\": \" \",\n            \"guardian_exempt_category\": \" \",\n            \"client_type\": \"D\",\n            \"pms\": \"N\",\n            \"default_dp\": \"NSDL\",\n            \"cdsl_dpid\": \" \",\n            \"cdslcltid\": \" \",\n            \"cmbp_id\": \"12345666\",\n            \"nsdldpid\": \"IN123456\",\n            \"nsdlcltid\": \"12345668\",\n            \"account_type_1\": \"CB\",\n            \"account_no_1\": \"1\",\n            \"micr_no_1\": \" \",\n            \"ifsc_code_1\": \"SBIN0000018\",\n            \"default_bank_flag_1\": \"N\",\n            \"account_type_2\": \"SB\",\n            \"account_no_2\": \"22\",\n            \"micr_no_2\": \" \",\n            \"ifsc_code_2\": \"SBIN0000018\",\n            \"default_bank_flag_2\": \"Y\",\n            \"account_type_3\": \" \",\n            \"account_no_3\": \" \",\n            \"micr_no_3\": \" \",\n            \"ifsc_code_3\": \" \",\n            \"default_bank_flag_3\": \" \",\n            \"account_type_4\": \" \",\n            \"account_no_4\": \" \",\n            \"micr_no_4\": \" \",\n            \"ifsc_code_4\": \" \",\n            \"default_bank_flag_4\": \" \",\n            \"account_type_5\": \" \",\n            \"account_no_5\": \" \",\n            \"micr_no_5\": \" \",\n            \"ifsc_code_5\": \" \",\n            \"default_bank_flag_5\": \" \",\n            \"cheque_name\": \"MY CHEQUE NAME\",\n            \"div_pay_mode\": \"01\",\n            \"address_1\": \"ADDRESS_1\",\n            \"address_2\": \"ADDRESS_2\",\n            \"address_3\": \"ADDRESS_3\",\n            \"city\": \"MUMBAI\",\n            \"state\": \"MA\",\n            \"pincode\": \"400008\",\n            \"country\": \"INDIA\",\n            \"resi_phone\": \"123123123\",\n            \"resi_fax\": \"321321321\",\n            \"office_phone\": \"789789789\",\n            \"office_fax\": \"987987987\",\n            \"email\": \"ABC@XYZ.COM\",\n            \"communication_mode\": \"E\",\n            \"foreign_address_1\": \" \",\n            \"foreign_address_2\": \" \",\n            \"foreign_address_3\": \" \",\n            \"foreign_address_city\": \" \",\n            \"foreign_address_pincode\": \" \",\n            \"foreign_address_state\": \" \",\n            \"foreign_address_country\": \" \",\n            \"foreign_address_resi_phone\": \" \",\n            \"foreign_address_fax\": \" \",\n            \"foreign_address_off_phone\": \" \",\n            \"foreign_address_off_fax\": \" \",\n            \"indian_mobile_no\": \"9876543210\",\n            \"nominee_1_name\": \"NOMINEE 1 NAME\",\n            \"nominee_1_relationship\": \"MOTHER\",\n            \"nominee_1_applicable\": \"100\",\n            \"nominee_1_minor_flag\": \"N\",\n            \"nominee_1_dob\": \" \",\n            \"nominee_1_guardian\": \" \",\n            \"nominee_2_name\": \" \",\n            \"nominee_2_relationship\": \" \",\n            \"nominee_2_applicable\": \" \",\n            \"nominee_2_dob\": \" \",\n            \"nominee_2_minor_flag\": \" \",\n            \"nominee_2_guardian\": \" \",\n            \"nominee_3_name\": \" \",\n            \"nominee_3_relationship\": \" \",\n            \"nominee_3_applicable\": \" \",\n            \"nominee_3_dob\": \" \",\n            \"nominee_3_minor_flag\": \" \",\n            \"nominee_3_guardian\": \" \",\n            \"primary_holder_kyc_type\": \"C\",\n            \"primary_holder_ckyc_number\": \"1234567891\",\n            \"second_holder_kyc_type\": \"K\",\n            \"second_holder_ckyc_number\": \" \",\n            \"third_holder_kyc_type\": \" \",\n            \"third_holder_ckyc_number\": \" \",\n            \"guardian_kyc_type\": \" \",\n            \"guardian_ckyc_number\": \" \",\n            \"primary_holder_kra_exempt_ref_no\": \" \",\n            \"second_holder_kra_exempt_ref_no\": \" \",\n            \"third_holder_kra_exempt_ref_no\": \" \",\n            \"guardian_exempt_ref_no\": \" \",\n            \"aadhaar_updated\": \"Y\",\n            \"mapin_id\": \"1234567887654320\",\n            \"paperless_flag\": \"Z\",\n            \"lei_no\": \"1234567890ABCDPEFDSA\",\n            \"lei_validity\": \"20/05/2025\",\n            \"mobile_declaration_flag\": \"SE\",\n            \"email_declaration_flag\": \"SE\",\n            \"nomination_opt\": \"Y\",\n            \"nomination_authentication\": \"O\",\n            \"nominee_1_pan\": \"ASKPD2345A\",\n            \"nominee_1_guardian_pan\": \"ASKPP2345A\",\n            \"nominee_2_pan\": \"ASKPP2345A\",\n            \"nominee_2_guardian_pan\": \"ASKPP2345A\",\n            \"nominee_3_pan\": \"ASKPP2345A\",\n            \"nominee_3_guardian_pan\": \"ASKPP2345A\",\n            \"second_holder_email\": \"xyz@gmail.com\",\n            \"second_holder_email_declaration\": \"SE\",\n            \"second_holder_mobile\": \"9823456723\",\n            \"second_holder_mobile_declaration\": \" \",\n            \"third_holder_email\": \"xyz@gmail.com\",\n            \"third_holder_email_declaration\": \"SE\",\n            \"third_holder_mobile\": \"9823456723\",\n            \"third_holder_mobile_declaration\": \"SE\",\n            \"consent_flag\": \" \",\n            \"reg_id\": \"3155003\",\n            \"reg_status\": \"REG_SUCCESS\",\n            \"reg_remark\": \" \"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "UCC Registration – 183 Column API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"reg_details\": [\n        {\n            \"client_code \": \"H3034\",\n            \"primary_holder_first_name \": \"PRIYANKA\",\n            \"primary_holder_middle_name \": \"R\",\n            \"primary_holder_last_name \": \"TOPIWALA\",\n            \"tax_status \": \"INDIVIDUAL\",\n            \"gender \": \"MALE\",\n            \"primary_holder_dob_incorporation \": \"04/11/1994\",\n            \"occupation_code \": \"BUSINESS\",\n            \"holding_nature \": \"SINGLE\",\n            \"second_holder_first_name \": \" \",\n            \"second_holder_middle_name \": \" \",\n            \"second_holder_last_name \": \" \",\n            \"third_holder_first_name \": \" \",\n            \"third_holder_middle_name \": \" \",\n            \"third_holder_last_name \": \" \",\n            \"second_holder_dob \": \" \",\n            \"third_holder_dob \": \" \",\n            \"guardian_first_name \": \" \",\n            \"guardian_middle_name \": \" \",\n            \"guardian_last_name \": \" \",\n            \"guardian_dob \": \" \",\n            \"primary_holder_pan_exempt \": \"NO\",\n            \"second_holder_pan_exempt \": \" \",\n            \"third_holder_pan_exempt \": \" \",\n            \"guardian_pan_exempt \": \" \",\n            \"primary_holder_pan \": \"BADPT6767G\",\n            \"second_holder_pan \": \" \",\n            \"third_holder_pan \": \" \",\n            \"guardian_pan \": \" \",\n            \"primary_holder_exempt_category \": \" \",\n            \"second_holder_exempt_category \": \" \",\n            \"third_holder_exempt_category \": \" \",\n            \"guardian_exempt_category \": \" \",\n            \"client_type \": \"NON DEMAT\",\n            \"pms \": \"NO\",\n            \"default_dp \": \"PHYS\",\n            \"cdsl_dpid \": \" \",\n            \"cdslcltid \": \" \",\n            \"cmbp_id \": \"12345666\",\n            \"nsdldpid \": \" \",\n            \"nsdlcltid \": \" \",\n            \"account_type_1 \": \"SB\",\n            \"account_no_1 \": \"12311115\",\n            \"micr_no_1 \": \" \",\n            \"ifsc_code_1 \": \"SBIN0000019\",\n            \"default_bank_flag_1 \": \"NO\",\n            \"account_type_2 \": \"SB\",\n            \"account_no_2 \": \"12311125\",\n            \"micr_no_2 \": \" \",\n            \"ifsc_code_2 \": \"SBIN0000018\",\n            \"default_bank_flag_2 \": \"YES\",\n            \"account_type_3 \": \" \",\n            \"account_no_3 \": \" \",\n            \"micr_no_3 \": \" \",\n            \"ifsc_code_3 \": \" \",\n            \"default_bank_flag_3 \": \" \",\n            \"account_type_4 \": \" \",\n            \"account_no_4 \": \" \",\n            \"micr_no_4 \": \" \",\n            \"ifsc_code_4 \": \" \",\n            \"default_bank_flag_4 \": \" \",\n            \"account_type_5 \": \" \",\n            \"account_no_5 \": \" \",\n            \"micr_no_5 \": \" \",\n            \"ifsc_code_5 \": \" \",\n            \"default_bank_flag_5 \": \" \",\n            \"cheque_name \": \"MY CHEQUE NAME\",\n            \"div_pay_mode \": \"1\",\n            \"address_1 \": \"ADDRESS_1\",\n            \"address_2 \": \"ADDRESS_2\",\n            \"address_3 \": \"ADDRESS_3\",\n            \"city \": \"MUMBAI\",\n            \"state \": \"MAHARASHTRA\",\n            \"pincode \": \"400008\",\n            \"country \": \"INDIA\",\n            \"resi_phone \": \"123123123\",\n            \"resi_fax \": \"321321321\",\n            \"office_phone \": \"789789789\",\n            \"office_fax \": \"987987987\",\n            \"email \": \"RAJU.SINGH@NJGROUP.IN\",\n            \"communication_mode \": \"ELECTRONIC\",\n            \"foreign_address_1 \": \" \",\n            \"foreign_address_2 \": \" \",\n            \"foreign_address_3 \": \" \",\n            \"foreign_address_city \": \" \",\n            \"foreign_address_pincode \": \" \",\n            \"foreign_address_state \": \" \",\n            \"foreign_address_country \": \" \",\n            \"foreign_address_resi_phone \": \" \",\n            \"foreign_address_fax \": \" \",\n            \"foreign_address_off_phone \": \" \",\n            \"foreign_address_off_fax \": \" \",\n            \"indian_mobile_no \": \"7079093915\",\n            \"primary_holder_kyc_type \": \"CKYC COMPLIANT\",\n            \"primary_holder_ckyc_number \": \"1234567891\",\n            \"second_holder_kyc_type \": \" \",\n            \"second_holder_ckyc_number \": \" \",\n            \"third_holder_kyc_type \": \" \",\n            \"third_holder_ckyc_number \": \" \",\n            \"guardian_kyc_type \": \" \",\n            \"guardian_ckyc_number \": \" \",\n            \"primary_holder_kra_exempt_ref_no \": \" \",\n            \"second_holder_kra_exempt_ref_no \": \" \",\n            \"third_holder_kra_exempt_ref_no \": \" \",\n            \"guardian_exempt_ref_no \": \" \",\n            \"aadhaar_updated \": \"YES\",\n            \"mapin_id \": \"1234567887654321\",\n            \"paperless_flag \": \"Paper\",\n            \"lei_no\": \" \",\n            \"lei_validity\": \" \",\n            \"mobile_declaration_flag\": \"Self\",\n            \"email_declaration_flag\": \"Self\",\n            \"second_holder_email\": \" \",\n            \"second_holder_email_declaration\": \" \",\n            \"second_holder_mobile\": \" \",\n            \"second_holder_mobile_declaration\": \" \",\n            \"third_holder_email\": \" \",\n            \"third_holder_email_declaration\": \" \",\n            \"third_holder_mobile\": \" \",\n            \"third_holder_mobile_declaration\": \" \",\n            \"guardian_relation\": \" \",\n            \"nomination_opt\": \"Y\",\n            \"nomination_authentication\": \"OTP\",\n            \"nominee_1_name \": \"NOMINEE 1 NAME\",\n            \"nominee_1_relationship \": \"AUNT\",\n            \"nominee_1_applicable \": \"90\",\n            \"nominee_1_minor_flag \": \"NO\",\n            \"nominee_1_dob \": \" \",\n            \"nominee_1_guardian \": \" \",\n            \"nominee_1_guardian_pan\": \"FSEPS0104D\",\n            \"nominee_1_identity_type\": \"1\",\n            \"nominee_1_identity_number\": \"CCCCC1234C\",\n            \"nominee_1_email\": \"\",\n            \"nominee_1_mobile\": \"\",\n            \"nominee_1_address1\": \"ADDRESS_1\",\n            \"nominee_1_address2\": \"ADDRESS_2\",\n            \"nominee_1_address3\": \"ADDRESS_3\",\n            \"nominee_1_city\": \"MUMBAI\",\n            \"nominee_1_pin\": \"400008\",\n            \"nominee_1_country\": \"INDIA\",\n            \"nominee_2_name \": \"NOMINEE 2 NAME\",\n            \"nominee_2_relationship \": \"AUNT\",\n            \"nominee_2_applicable \": \"10\",\n            \"nominee_2_dob \": \"01/02/2010\",\n            \"nominee_2_minor_flag \": \"YES\",\n            \"nominee_2_guardian \": \"NOMINEE 2 GUARDIAN\",\n            \"nominee_2_guardian_pan\": \"FSEPS0104F\",\n            \"nominee_2_identity_type\": \"1\",\n            \"nominee_2_identity_number\": \"BBBBB1234B\",\n            \"nominee_2_email\": \"\",\n            \"nominee_2_mobile\": \"\",\n            \"nominee_2_address1\": \"ADDRESS_1\",\n            \"nominee_2_address2\": \"ADDRESS_2\",\n            \"nominee_2_address3\": \"ADDRESS_3\",\n            \"nominee_2_city\": \"MUMBAI\",\n            \"nominee_2_pin\": \"400008\",\n            \"nominee_2_country\": \"INDIA\",\n            \"nominee_3_name \": \" \",\n            \"nominee_3_relationship \": \" \",\n            \"nominee_3_applicable \": \"0\",\n            \"nominee_3_dob \": \" \",\n            \"nominee_3_minor_flag \": \" \",\n            \"nominee_3_guardian \": \" \",\n            \"nominee_3_guardian_pan\": \" \",\n            \"nominee_3_identity_type\": \"1\",\n            \"nominee_3_identity_number\": \"AAAAA1234A\",\n            \"nominee_3_email\": \"\",\n            \"nominee_3_mobile\": \"\",\n            \"nominee_3_address1\": \"ADDRESS_1\",\n            \"nominee_3_address2\": \"ADDRESS_2\",\n            \"nominee_3_address3\": \"ADDRESS_3\",\n            \"nominee_3_city\": \"MUMBAI\",\n            \"nominee_3_pin\": \"400008\",\n            \"nominee_3_country\": \"INDIA\",\n            \"nominee_soa\": \"N\",\n            \"reg_id\": \"\",\n            \"reg_status\": \"\",\n            \"reg_remark\": \"\"\n        }\n    ]\n}"
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/CLIENTCOMMON"
			},
			"response": [
				{
					"name": "success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "memberId",
								"value": "{{member_code}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reg_details\": [\n        {\n            \"client_code\": \"K0281\",\n            \"primary_holder_first_name\": \"KK\",\n            \"primary_holder_middle_name\": \"B\",\n            \"primary_holder_last_name\": \"DESAI\",\n            \"tax_status\": \"01\",\n            \"gender\": \"M\",\n            \"primary_holder_dob_incorporation\": \"03-08-1991\",\n            \"occupation_code\": \"01\",\n            \"holding_nature\": \"JO\",\n            \"second_holder_first_name\": \"SECONFIRST\",\n            \"second_holder_middle_name\": \"SECONDMIDDLE\",\n            \"second_holder_last_name\": \"SECONDLAST\",\n            \"third_holder_first_name\": \"THIRDFIRST\",\n            \"third_holder_middle_name\": \"THIRDMIDDLE\",\n            \"third_holder_last_name\": \"THIRDLAST\",\n            \"second_holder_dob\": \"01/01/1995\",\n            \"third_holder_dob\": \"01/01/1996\",\n            \"guardian_first_name\": \"\",\n            \"guardian_middle_name\": \"\",\n            \"guardian_last_name\": \"\",\n            \"guardian_dob\": \"\",\n            \"primary_holder_pan_exempt\": \"N\",\n            \"second_holder_pan_exempt\": \"N\",\n            \"third_holder_pan_exempt\": \"N\",\n            \"guardian_pan_exempt\": \"N\",\n            \"primary_holder_pan\": \"AAAPA1234A\",\n            \"second_holder_pan\": \"BBBPB1234B\",\n            \"third_holder_pan\": \"CCCPC1234C\",\n            \"guardian_pan\": \"\",\n            \"primary_holder_exempt_category\": \"\",\n            \"second_holder_exempt_category\": \"\",\n            \"third_holder_exempt_category\": \"\",\n            \"guardian_exempt_category\": \"\",\n            \"client_type\": \"D\",\n            \"pms\": \"N\",\n            \"default_dp\": \"NSDL\",\n            \"cdsl_dpid\": \"\",\n            \"cdslcltid\": \"\",\n            \"cmbp_id\": \"12345666\",\n            \"nsdldpid\": \"IN123456\",\n            \"nsdlcltid\": \"12345668\",\n            \"account_type_1\": \"CB\",\n            \"account_no_1\": \"1\",\n            \"micr_no_1\": \"\",\n            \"ifsc_code_1\": \"SBIN0000018\",\n            \"default_bank_flag_1\": \"N\",\n            \"account_type_2\": \"SB\",\n            \"account_no_2\": \"22\",\n            \"micr_no_2\": \"\",\n            \"ifsc_code_2\": \"SBIN0000018\",\n            \"default_bank_flag_2\": \"Y\",\n            \"account_type_3\": \"\",\n            \"account_no_3\": \"\",\n            \"micr_no_3\": \"\",\n            \"ifsc_code_3\": \"\",\n            \"default_bank_flag_3\": \"\",\n            \"account_type_4\": \"\",\n            \"account_no_4\": \"\",\n            \"micr_no_4\": \"\",\n            \"ifsc_code_4\": \"\",\n            \"default_bank_flag_4\": \"\",\n            \"account_type_5\": \"\",\n            \"account_no_5\": \"\",\n            \"micr_no_5\": \"\",\n            \"ifsc_code_5\": \"\",\n            \"default_bank_flag_5\": \"\",\n            \"cheque_name\": \"MY CHEQUE NAME\",\n            \"div_pay_mode\": \"01\",\n            \"address_1\": \"ADDRESS_1\",\n            \"address_2\": \"ADDRESS_2\",\n            \"address_3\": \"ADDRESS_3\",\n            \"city\": \"MUMBAI\",\n            \"state\": \"MA\",\n            \"pincode\": \"400008\",\n            \"country\": \"INDIA\",\n            \"resi_phone\": \"123123123\",\n            \"resi_fax\": \"321321321\",\n            \"office_phone\": \"789789789\",\n            \"office_fax\": \"987987987\",\n            \"email\": \"ABC@XYZ.COM\",\n            \"communication_mode\": \"E\",\n            \"foreign_address_1\": \"\",\n            \"foreign_address_2\": \"\",\n            \"foreign_address_3\": \"\",\n            \"foreign_address_city\": \"\",\n            \"foreign_address_pincode\": \"\",\n            \"foreign_address_state\": \"\",\n            \"foreign_address_country\": \"\",\n            \"foreign_address_resi_phone\": \"\",\n            \"foreign_address_fax\": \"\",\n            \"foreign_address_off_phone\": \"\",\n            \"foreign_address_off_fax\": \"\",\n            \"indian_mobile_no\": \"9876543210\",\n            \"nominee_1_name\": \"NOMINEE 1 NAME\",\n            \"nominee_1_relationship\": \"KISHAN M PRAJAPATI MADHI SURAT\",\n            \"nominee_1_applicable\": \"100\",\n            \"nominee_1_minor_flag\": \"N\",\n            \"nominee_1_dob\": \"\",\n            \"nominee_1_guardian\": \"\",\n            \"nominee_2_name\": \"\",\n            \"nominee_2_relationship\": \"\",\n            \"nominee_2_applicable\": \"\",\n            \"nominee_2_dob\": \"\",\n            \"nominee_2_minor_flag\": \"\",\n            \"nominee_2_guardian\": \"\",\n            \"nominee_3_name\": \"\",\n            \"nominee_3_relationship\": \"\",\n            \"nominee_3_applicable\": \"\",\n            \"nominee_3_dob\": \"\",\n            \"nominee_3_minor_flag\": \"\",\n            \"nominee_3_guardian\": \"\",\n            \"primary_holder_kyc_type\": \"C\",\n            \"primary_holder_ckyc_number\": \"1234567891\",\n            \"second_holder_kyc_type\": \"K\",\n            \"second_holder_ckyc_number\": \"\",\n            \"third_holder_kyc_type\": \"\",\n            \"third_holder_ckyc_number\": \"\",\n            \"guardian_kyc_type\": \"\",\n            \"guardian_ckyc_number\": \"\",\n            \"primary_holder_kra_exempt_ref_no\": \"\",\n            \"second_holder_kra_exempt_ref_no\": \"\",\n            \"third_holder_kra_exempt_ref_no\": \"\",\n            \"guardian_exempt_ref_no\": \"\",\n            \"aadhaar_updated\": \"Y\",\n            \"mapin_id\": \"1234567887654320\",\n            \"paperless_flag\": \"Z\",\n            \"lei_no\": \"1234567890abcdpefdsa\",\n            \"lei_validity\": \"20/05/2025\",\n            \"mobile_declaration_flag\": \"SE\",\n            \"email_declaration_flag\": \"SE\",\n            \"nomination_opt\": \"Y\",\n            \"nomination_authentication\": \"O\",\n            \"nominee_1_pan\": \"ASKPD2345A\",\n            \"nominee_1_guardian_pan\": \"ASKPP2345A\",\n            \"nominee_2_pan\": \"ASKPP2345A\",\n            \"nominee_2_guardian_pan\": \"ASKPP2345A\",\n            \"nominee_3_pan\": \"ASKPP2345A\",\n            \"nominee_3_guardian_pan\": \"ASKPP2345A\",\n            \"second_holder_email\": \"xyz@gmail.com\",\n            \"second_holder_email_declaration\": \"SE\",\n            \"second_holder_mobile\": \"9823456723\",\n            \"second_holder_mobile declaration\": \"{{second_holder_mobile declaration}}\",\n            \"third_holder_email\": \"xyz@gmail.com\",\n            \"third_holder_email_declaration\": \"SE\",\n            \"third_holder_mobile\": \"9823456723\",\n            \"third_holder_mobile_declaration\": \"SE\",\n            \"reg_id\": \"\",\n            \"reg_status\": \"\",\n            \"reg_remark\": \"\",\n            \"consent_flag\": \"\"\n        }\n    ]\n}"
						},
						"url": "{{url}}/nsemfdesk/api/{{version}}/registration/CLIENTCOMMON"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Fri, 26 Apr 2024 12:29:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"reg_details\": [\n        {\n            \"client_code\": \"K0281\",\n            \"primary_holder_first_name\": \"KK\",\n            \"primary_holder_middle_name\": \"B\",\n            \"primary_holder_last_name\": \"DESAI\",\n            \"tax_status\": \"01\",\n            \"gender\": \"M\",\n            \"primary_holder_dob_incorporation\": \"03-08-1991\",\n            \"occupation_code\": \"01\",\n            \"holding_nature\": \"JO\",\n            \"second_holder_first_name\": \"SECONFIRST\",\n            \"second_holder_middle_name\": \"SECONDMIDDLE\",\n            \"second_holder_last_name\": \"SECONDLAST\",\n            \"third_holder_first_name\": \"THIRDFIRST\",\n            \"third_holder_middle_name\": \"THIRDMIDDLE\",\n            \"third_holder_last_name\": \"THIRDLAST\",\n            \"second_holder_dob\": \"01/01/1995\",\n            \"third_holder_dob\": \"01/01/1996\",\n            \"guardian_first_name\": \" \",\n            \"guardian_middle_name\": \" \",\n            \"guardian_last_name\": \" \",\n            \"guardian_dob\": \" \",\n            \"primary_holder_pan_exempt\": \"N\",\n            \"second_holder_pan_exempt\": \"N\",\n            \"third_holder_pan_exempt\": \"N\",\n            \"guardian_pan_exempt\": \"N\",\n            \"primary_holder_pan\": \"AAAPA1234A\",\n            \"second_holder_pan\": \"BBBPB1234B\",\n            \"third_holder_pan\": \"CCCPC1234C\",\n            \"guardian_pan\": \" \",\n            \"primary_holder_exempt_category\": \" \",\n            \"second_holder_exempt_category\": \" \",\n            \"third_holder_exempt_category\": \" \",\n            \"guardian_exempt_category\": \" \",\n            \"client_type\": \"D\",\n            \"pms\": \"N\",\n            \"default_dp\": \"NSDL\",\n            \"cdsl_dpid\": \" \",\n            \"cdslcltid\": \" \",\n            \"cmbp_id\": \"12345666\",\n            \"nsdldpid\": \"IN123456\",\n            \"nsdlcltid\": \"12345668\",\n            \"account_type_1\": \"CB\",\n            \"account_no_1\": \"1\",\n            \"micr_no_1\": \" \",\n            \"ifsc_code_1\": \"SBIN0000018\",\n            \"default_bank_flag_1\": \"N\",\n            \"account_type_2\": \"SB\",\n            \"account_no_2\": \"22\",\n            \"micr_no_2\": \" \",\n            \"ifsc_code_2\": \"SBIN0000018\",\n            \"default_bank_flag_2\": \"Y\",\n            \"account_type_3\": \" \",\n            \"account_no_3\": \" \",\n            \"micr_no_3\": \" \",\n            \"ifsc_code_3\": \" \",\n            \"default_bank_flag_3\": \" \",\n            \"account_type_4\": \" \",\n            \"account_no_4\": \" \",\n            \"micr_no_4\": \" \",\n            \"ifsc_code_4\": \" \",\n            \"default_bank_flag_4\": \" \",\n            \"account_type_5\": \" \",\n            \"account_no_5\": \" \",\n            \"micr_no_5\": \" \",\n            \"ifsc_code_5\": \" \",\n            \"default_bank_flag_5\": \" \",\n            \"cheque_name\": \"MY CHEQUE NAME\",\n            \"div_pay_mode\": \"01\",\n            \"address_1\": \"ADDRESS_1\",\n            \"address_2\": \"ADDRESS_2\",\n            \"address_3\": \"ADDRESS_3\",\n            \"city\": \"MUMBAI\",\n            \"state\": \"MA\",\n            \"pincode\": \"400008\",\n            \"country\": \"INDIA\",\n            \"resi_phone\": \"123123123\",\n            \"resi_fax\": \"321321321\",\n            \"office_phone\": \"789789789\",\n            \"office_fax\": \"987987987\",\n            \"email\": \"ABC@XYZ.COM\",\n            \"communication_mode\": \"E\",\n            \"foreign_address_1\": \" \",\n            \"foreign_address_2\": \" \",\n            \"foreign_address_3\": \" \",\n            \"foreign_address_city\": \" \",\n            \"foreign_address_pincode\": \" \",\n            \"foreign_address_state\": \" \",\n            \"foreign_address_country\": \" \",\n            \"foreign_address_resi_phone\": \" \",\n            \"foreign_address_fax\": \" \",\n            \"foreign_address_off_phone\": \" \",\n            \"foreign_address_off_fax\": \" \",\n            \"indian_mobile_no\": \"9876543210\",\n            \"nominee_1_name\": \"NOMINEE 1 NAME\",\n            \"nominee_1_relationship\": \"MOTHER\",\n            \"nominee_1_applicable\": \"100\",\n            \"nominee_1_minor_flag\": \"N\",\n            \"nominee_1_dob\": \" \",\n            \"nominee_1_guardian\": \" \",\n            \"nominee_2_name\": \" \",\n            \"nominee_2_relationship\": \" \",\n            \"nominee_2_applicable\": \" \",\n            \"nominee_2_dob\": \" \",\n            \"nominee_2_minor_flag\": \" \",\n            \"nominee_2_guardian\": \" \",\n            \"nominee_3_name\": \" \",\n            \"nominee_3_relationship\": \" \",\n            \"nominee_3_applicable\": \" \",\n            \"nominee_3_dob\": \" \",\n            \"nominee_3_minor_flag\": \" \",\n            \"nominee_3_guardian\": \" \",\n            \"primary_holder_kyc_type\": \"C\",\n            \"primary_holder_ckyc_number\": \"1234567891\",\n            \"second_holder_kyc_type\": \"K\",\n            \"second_holder_ckyc_number\": \" \",\n            \"third_holder_kyc_type\": \" \",\n            \"third_holder_ckyc_number\": \" \",\n            \"guardian_kyc_type\": \" \",\n            \"guardian_ckyc_number\": \" \",\n            \"primary_holder_kra_exempt_ref_no\": \" \",\n            \"second_holder_kra_exempt_ref_no\": \" \",\n            \"third_holder_kra_exempt_ref_no\": \" \",\n            \"guardian_exempt_ref_no\": \" \",\n            \"aadhaar_updated\": \"Y\",\n            \"mapin_id\": \"1234567887654320\",\n            \"paperless_flag\": \"Z\",\n            \"lei_no\": \"1234567890ABCDPEFDSA\",\n            \"lei_validity\": \"20/05/2025\",\n            \"mobile_declaration_flag\": \"SE\",\n            \"email_declaration_flag\": \"SE\",\n            \"nomination_opt\": \"Y\",\n            \"nomination_authentication\": \"O\",\n            \"nominee_1_pan\": \"ASKPD2345A\",\n            \"nominee_1_guardian_pan\": \"ASKPP2345A\",\n            \"nominee_2_pan\": \"ASKPP2345A\",\n            \"nominee_2_guardian_pan\": \"ASKPP2345A\",\n            \"nominee_3_pan\": \"ASKPP2345A\",\n            \"nominee_3_guardian_pan\": \"ASKPP2345A\",\n            \"second_holder_email\": \"xyz@gmail.com\",\n            \"second_holder_email_declaration\": \"SE\",\n            \"second_holder_mobile\": \"9823456723\",\n            \"second_holder_mobile_declaration\": \" \",\n            \"third_holder_email\": \"xyz@gmail.com\",\n            \"third_holder_email_declaration\": \"SE\",\n            \"third_holder_mobile\": \"9823456723\",\n            \"third_holder_mobile_declaration\": \"SE\",\n            \"consent_flag\": \" \",\n            \"reg_id\": \"3155003\",\n            \"reg_status\": \"REG_SUCCESS\",\n            \"reg_remark\": \" \"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "SIP Cancellation Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"can_data\": [\n        {\n            \"client_code\": \"1001\",\n            \"sip_reg_no\": \"1747\",\n            \"remarks\": \"13:(SIP cancel 1747)\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/cancellation/SIP_CAN"
			},
			"response": []
		},
		{
			"name": "XSIP Cancellation Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"can_data\": [\n        {\n            \"client_code\": \"1001\",\n            \"xsip_reg_no\": \"1747\",\n            \"remarks\": \"13:(SIP cancel 1747)\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/cancellation/XSIP_CAN"
			},
			"response": []
		},
		{
			"name": "DAILY XSIP Cancellation Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"can_data\": [\n        {\n            \"client_code\": \"1001\",\n            \"xsip_reg_no\": \"1747\",\n            \"xsip_cancel_date\": \"25/01/2025\",\n            \"remarks\": \"13:(SIP cancel 1747)\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/cancellation/DAILY_XSIP_CAN"
			},
			"response": []
		},
		{
			"name": "STP Cancellation Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"can_data\": [\n        {\n            \"client_code\": \"K0281\",\n            \"stp_reg_no\": \"1747\",\n            \"remarks\": \"Cancel request by investor\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/cancellation/STP_CAN"
			},
			"response": []
		},
		{
			"name": "Client Bank Detail API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"bank_dtl\": [\n        {\n            \"client_code\": \"K0281\",\n            \"action_type\": \"ADD\",\n            \"account_type\": \"SB\",\n            \"account_no\": \"311242065229\",\n            \"micr_no\": \"\",\n            \"ifsc_code\": \"KKBK0000872\",\n            \"default_bank_flag\": \"N\"\n        },\n        {\n            \"client_code\": \"A0145\",\n            \"action_type\": \"DEL\",\n            \"account_type\": \"CB\",\n            \"account_no\": \"00101229769449\",\n            \"micr_no\": \"\",\n            \"ifsc_code\": \"SBIN0004193\",\n            \"default_bank_flag\": \"N\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/CLIENTBANKDTL"
			},
			"response": []
		},
		{
			"name": "Mandate Registration",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"reg_data\": [\n        {\n            \"client_code\": \"500231\",\n            \"amount\": \"1000\",\n            \"mandate_type\": \"X\",\n            \"account_no\": \"22\",\n            \"ac_type\": \"SB\",\n            \"ifsc_code\": \"SBIN0000018\",\n            \"micr_code\": \"\",\n            \"start_date\": \"05/03/2024\",\n            \"end_date\": \"15/09/2025\",\n            \"member_mandate_no\": \"11\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/product/MANDATE"
			},
			"response": [
				{
					"name": "SUCCESS",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "memberId",
								"value": "{{member_code}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reg_data\": [\n        {\n            \"client_code\": \"500231\",\n            \"amount\": \"1000\",\n            \"mandate_type\": \"X\",\n            \"account_no\": \"22\",\n            \"ac_type\": \"SB\",\n            \"ifsc_code\": \"SBIN0000018\",\n            \"micr_code\": \"\",\n            \"start_date\": \"07/03/2024\",\n            \"end_date\": \"15/09/2025\",\n            \"member_mandate_no\": \"11\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/nsemfdesk/api/{{version}}/registration/product/MANDATE"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Mar 2024 12:50:29 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"reg_data\": [\n        {\n            \"client_code\": \"500231\",\n            \"amount\": \"1000\",\n            \"mandate_type\": \"X\",\n            \"account_no\": \"22\",\n            \"ac_type\": \"SB\",\n            \"ifsc_code\": \"SBIN0000018\",\n            \"micr_code\": \" \",\n            \"start_date\": \"07/03/2024\",\n            \"end_date\": \"15/09/2025\",\n            \"member_mandate_no\": \"11\",\n            \"reg_id\": \"2024030710018\",\n            \"reg_status\": \"REG_SUCCESS\",\n            \"reg_remark\": \" \"\n        }\n    ]\n}"
				},
				{
					"name": "FAIL",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "memberId",
								"value": "{{member_code}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reg_data\": [\n        {\n            \"client_code\": \"500231\",\n            \"amount\": \"1000\",\n            \"mandate_type\": \"X\",\n            \"account_no\": \"22\",\n            \"ac_type\": \"SB\",\n            \"ifsc_code\": \"SBIN0000018\",\n            \"micr_code\": \"\",\n            \"start_date\": \"05/03/2024\",\n            \"end_date\": \"15/09/2025\",\n            \"member_mandate_no\": \"11\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/nsemfdesk/api/{{version}}/registration/product/MANDATE"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Thu, 07 Mar 2024 12:52:25 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"reg_data\": [\n        {\n            \"client_code\": \"500231\",\n            \"amount\": \"1000\",\n            \"mandate_type\": \"X\",\n            \"account_no\": \"22\",\n            \"ac_type\": \"SB\",\n            \"ifsc_code\": \"SBIN0000018\",\n            \"micr_code\": \" \",\n            \"start_date\": \"05/03/2024\",\n            \"end_date\": \"15/09/2025\",\n            \"member_mandate_no\": \"11\",\n            \"reg_id\": \" \",\n            \"reg_status\": \"REG_FAILED\",\n            \"reg_remark\": \"START DATE CANNOT BE LESSER THAN CURRENT DATE.\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Scan Mandate Image Upload API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"client_code\": \"K0281\",\n    \"mandate_id\": \"751518\",\n    \"file_name\": \"abc.jpg\",\n    // \"image_type\": \"image/tiff\",\n    \"file_data\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII=\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/fileupload/MANDATEIMG"
			},
			"response": []
		},
		{
			"name": "UTR No Update on Purchase Order API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"utr_details\": [\n        {\n            \"client_code\": \"K0281\",\n            \"bank_name\": \"Kotak Mahindra bank\",\n            \"account_no\": \"0123456522\",\n            \"ifsc\": \"KKBK0000872\",\n            \"utr_no\": \"150983120614\",\n            \"transfer_date\": \"29/04/2024\",\n            \"order_id\": \"441200000008\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/transaction/UTRUPDATE"
			},
			"response": []
		},
		{
			"name": "SIP UMRN Mapping API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sip_reg_id\": 202404291005001,\n    \"umrn\": \"KBID7010000088990011\",\n    \"remark\": \"request by member\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/fileupload/SIPUMRN"
			},
			"response": []
		},
		{
			"name": "Provisional Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": "en-US",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": "www.google.com",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from_date\": \"2024-11-10\",\n    \"to_date\": \"2024-11-16\",\n    \"trans_type\": \"ALL\",\n    \"order_type\": \"ALL\",\n    \"sub_order_type\": \"ALL\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/PROV_ORDERS"
			},
			"response": []
		},
		{
			"name": "Order Status Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from_date\": \"2023-11-10\",\n    \"to_date\": \"2023-11-16\",\n    \"trans_type\": \"ALL\",\n    \"order_type\": \"ALL\",\n    \"sub_order_type\": \"ALL\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/ORDER_STATUS"
			},
			"response": []
		},
		{
			"name": "Mandate Status Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"from_date\": \"2020-03-15\",\n\t\"to_date\": \"2025-04-03\",\n\t\"client_code\": \"143994\",\n\t\"mandate_id\":\"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/MANDATE_STATUS"
			},
			"response": [
				{
					"name": "success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "memberId",
								"value": "{{member_code}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"from_date\": \"2023-01-15\",\n\t\"to_date\": \"2025-01-30\",\n\t\"client_code\": \"500231\",\n\t\"mandate_id\":\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/nsemfdesk/api/v2/reports/MANDATE_STATUS"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Wed, 19 Mar 2025 12:08:58 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"response_status\": \"S\",\n    \"report_data_total\": \"1\",\n    \"report_data\": [\n        {\n            \"mandateId\": \"2024030710018\",\n            \"memberMandateId\": \"11\",\n            \"clientCode\": \"500231\",\n            \"clientName\": \"ASHOKFIRST ASHOKMIDDLE ASHOKLAST\",\n            \"memberCode\": \"00001\",\n            \"bankName\": \"state bank\",\n            \"bankBranch\": \"BALLYGUNGE\",\n            \"amount\": \"1000\",\n            \"registrationDate\": \"07/03/2024\",\n            \"status\": \"REGISTERED BY MEMBER\",\n            \"umrnNo\": \"399002\",\n            \"remarks\": \" \",\n            \"approvedDate\": \" \",\n            \"bankAccountNumber\": \"22\",\n            \"mandateCollectionType\": \" \",\n            \"mandateType\": \"X\",\n            \"dateOfUpload\": \" \",\n            \"startDate\": \"07/03/2024\",\n            \"endDate\": \"15/09/2025\",\n            \"dateOfReupload\": \" \"\n        }\n    ],\n    \"error_remark\": \"\"\n}"
				}
			]
		},
		{
			"name": "Get short URL Link",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"productType\": \"PUR\",\n    \"productRefId\": 443300100912\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/GET_LINK"
			},
			"response": [
				{
					"name": "success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "memberId",
								"value": "{{member_code}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productType\": \"PUR\",\n    \"productRefId\": \"443300100912\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/nsemfdesk/api/{{version}}/reports/GET_LINK"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Mon, 25 Nov 2024 12:15:08 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"productType\": \"PUR\",\n    \"productRefId\": \"443300100912\",\n    \"firstHolderLink\": \"https://testnsemf.njtechdesk.com/mf/51ae3912\",\n    \"secondHolderLink\": \"\",\n    \"thirdHolderLink\": \"\",\n    \"errorMessage\": \"\"\n}"
				}
			]
		},
		{
			"name": "Resend Communication API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"productType\": \"PUR\",\n    \"productRefId\": 443300100912\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/RESEND_COMM"
			},
			"response": []
		},
		{
			"name": "Fatca Upload ( For Individual Only)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"reg_details\": [\n        {\n            \"pan_rp\": \"BVYPD3824K\",\n            \"pekrn\": \"avdfert123\",\n            \"inv_name\": \"MoinTest\",\n            \"dob\": \"19/02/2019\",\n            \"fr_name\": \"\",\n            \"sp_name\": \"\",\n            \"tax_status\": \"01\",\n            \"data_src\": \"P\",\n            \"addr_type\": \"5\",\n            \"po_bir_inc\": \"Kanbhai\",\n            \"co_bir_inc\": \"TC\",\n            \"tax_res1\": \"AU\",\n            \"tpin1\": \"MOINAU\",\n            \"id1_type\": \"e1\",\n            \"tax_res2\": \"\",\n            \"tpin2\": \"\",\n            \"id2_type\": \"B\",\n            \"tax_res3\": \"\",\n            \"tpin3\": \"\",\n            \"id3_type\": \"\",\n            \"tax_res4\": \"\",\n            \"tpin4\": \"\",\n            \"id4_type\": \"\",\n            \"srce_wealt\": \"08\",\n            \"corp_servs\": \"01\",\n            \"inc_slab\": \"31\",\n            \"net_worth\": \"12345678901234567\",\n            \"nw_date\": \"01/01/2019\",\n            \"pep_flag\": \"N\",\n            \"occ_code\": \"44\",\n            \"occ_type\": \"O\",\n            \"exemp_code\": \"M\",\n            \"ffi_drnfe\": \"FFI\",\n            \"giin_no\": \"12345\",\n            \"spr_entity\": \"ABC\",\n            \"giin_na\": \"AF\",\n            \"giin_exemc\": \"1\",\n            \"nffe_catg\": \"A\",\n            \"act_nfe_sc\": \"07\",\n            \"nature_bus\": \"MOHAMMADHANIFBHAI GULAMMUSTAFA\",\n            \"rel_listed\": \"TATA\",\n            \"exch_name\": \"O\",\n            \"ubo_appl\": \"N\",\n            \"ubo_count\": \"\",\n            \"ubo_name\": \"\",\n            \"ubo_pan\": \"\",\n            \"ubo_nation\": \"\",\n            \"ubo_add1\": \"\",\n            \"ubo_add2\": \"\",\n            \"ubo_add3\": \"\",\n            \"ubo_city\": \"\",\n            \"ubo_pin\": \"\",\n            \"ubo_state\": \"\",\n            \"ubo_cntry\": \"\",\n            \"ubo_add_ty\": \"\",\n            \"ubo_ctr\": \"\",\n            \"ubo_tin\": \"\",\n            \"ubo_id_ty\": \"\",\n            \"ubo_cob\": \"\",\n            \"ubo_dob\": \"\",\n            \"ubo_gender\": \"\",\n            \"ubo_fr_nam\": \"\",\n            \"ubo_occ\": \"\",\n            \"ubo_occ_ty\": \"\",\n            \"ubo_tel\": \"\",\n            \"ubo_mobile\": \"\",\n            \"ubo_code\": \"\",\n            \"ubo_hol_pc\": \"\",\n            \"sdf_flag\": \"Y\",\n            \"ubo_df\": \"N\",\n            \"aadhaar_rp\": \"\",\n            \"new_change\": \"\",\n            \"log_name\": \"Moin Kapadia\",\n            \"filler1\": \"\",\n            \"filler2\": \"\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/FATCA"
			},
			"response": []
		},
		{
			"name": "Fatca Upload ( Common ) API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"reg_details\": [\n        {\n            \"pan_rp\": \"BVYPD3824K\",\n            \"pekrn\": \"avdfert123\",\n            \"inv_name\": \"MoinTest\",\n            \"dob\": \"19/02/2019\",\n            \"fr_name\": \"\",\n            \"sp_name\": \"\",\n            \"tax_status\": \"01\",\n            \"data_src\": \"P\",\n            \"addr_type\": \"5\",\n            \"po_bir_inc\": \"Kanbhai\",\n            \"co_bir_inc\": \"TC\",\n            \"tax_res1\": \"AU\",\n            \"tpin1\": \"MOINAU\",\n            \"id1_type\": \"e1\",\n            \"tax_res2\": \"\",\n            \"tpin2\": \"\",\n            \"id2_type\": \"B\",\n            \"tax_res3\": \"\",\n            \"tpin3\": \"\",\n            \"id3_type\": \"\",\n            \"tax_res4\": \"\",\n            \"tpin4\": \"\",\n            \"id4_type\": \"\",\n            \"srce_wealt\": \"08\",\n            \"corp_servs\": \"01\",\n            \"inc_slab\": \"31\",\n            \"net_worth\": \"12345678901234567\",\n            \"nw_date\": \"01/01/2019\",\n            \"pep_flag\": \"N\",\n            \"occ_code\": \"44\",\n            \"occ_type\": \"O\",\n            \"exemp_code\": \"M\",\n            \"ffi_drnfe\": \"FFI\",\n            \"giin_no\": \"12345\",\n            \"spr_entity\": \"ABC\",\n            \"giin_na\": \"AF\",\n            \"giin_exemc\": \"1\",\n            \"nffe_catg\": \"A\",\n            \"act_nfe_sc\": \"07\",\n            \"nature_bus\": \"MOHAMMADHANIFBHAI GULAMMUSTAFA\",\n            \"rel_listed\": \"TATA\",\n            \"exch_name\": \"O\",\n            \"ubo_appl\": \"N\",\n            \"ubo_count\": \"\",\n            \"sdf_flag\": \"Y\",\n            \"ubo_df\": \"N\",\n            \"aadhaar_rp\": \"\",\n            \"new_change\": \"\",\n            \"log_name\": \"Moin Kapadia\",\n            \"ubo_exch\": \"\",\n            \"ubo_isin\": \"\",\n            \"ubo_rel_li\": \"\",\n            \"npo_form\": \"\",\n            \"npo_dcl\": \"\",\n            \"npo_rgno\": \"\",\n            \"ubo_details\": [\n                {\n                    \"ubo_name\": \"MAHESHUBONAME\",\n                    \"ubo_pan\": \"UQOPA1188A\",\n                    \"ubo_nation\": \"IN\",\n                    \"ubo_add1\": \"SURATADDRESS\",\n                    \"ubo_add2\": \"SURATADDRESS\",\n                    \"ubo_add3\": \"SURATADDRESS\",\n                    \"ubo_city\": \"SURAT\",\n                    \"ubo_pin\": \"395010\",\n                    \"ubo_state\": \"GJ\",\n                    \"ubo_cntry\": \"IN\",\n                    \"ubo_add_ty\": \"1\",\n                    \"ubo_ctr\": \"IN\",\n                    \"ubo_tin\": \"982345671\",\n                    \"ubo_id_ty\": \"A\",\n                    \"ubo_cob\": \"IN\",\n                    \"ubo_dob\": \"15-06-1960 00:00:00\",\n                    \"ubo_gender\": \"M\",\n                    \"ubo_fr_nam\": \"UBOFATHER\",\n                    \"ubo_occ\": \"1\",\n                    \"ubo_occ_ty\": \"B \",\n                    \"ubo_tel\": \"9925899707\",\n                    \"ubo_mobile\": \"9033692510\",\n                    \"ubo_code\": \"C01\",\n                    \"ubo_hol_pc\": \"50\",\n                    \"ubo_categ\": \"SMO\",\n                    \"ubo_pep_fl\": \"N\",\n                    \"ubo_email\": \"\",\n                    \"ubo_smo_de\": \"SMODE\"\n                },\n                {\n                    \"ubo_name\": \"SURESHUBONAME\",\n                    \"ubo_pan\": \"UROPA1188A\",\n                    \"ubo_nation\": \"IN\",\n                    \"ubo_add1\": \"SURATADDRESS01\",\n                    \"ubo_add2\": \"SURATADDRESS02\",\n                    \"ubo_add3\": \"SURATADDRESS03\",\n                    \"ubo_city\": \"SURAT\",\n                    \"ubo_pin\": \"395010\",\n                    \"ubo_state\": \"GJ\",\n                    \"ubo_cntry\": \"IN\",\n                    \"ubo_add_ty\": \"1\",\n                    \"ubo_ctr\": \"IN\",\n                    \"ubo_tin\": \"992345671\",\n                    \"ubo_id_ty\": \"A\",\n                    \"ubo_cob\": \"IN\",\n                    \"ubo_dob\": \"15-06-1960 00:00:00\",\n                    \"ubo_gender\": \"M\",\n                    \"ubo_fr_nam\": \"UBOFATHER\",\n                    \"ubo_occ\": \"1\",\n                    \"ubo_occ_ty\": \"B \",\n                    \"ubo_tel\": \"9925899707\",\n                    \"ubo_mobile\": \"9033692510\",\n                    \"ubo_code\": \"C01\",\n                    \"ubo_hol_pc\": \"50\",\n                    \"ubo_categ\": \"SMO\",\n                    \"ubo_pep_fl\": \"N\",\n                    \"ubo_email\": \"\",\n                    \"ubo_smo_de\": \"SMODESS\"\n                }\n            ]\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/FATCA_COMMON"
			},
			"response": []
		},
		{
			"name": "AOF Image Upload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"client_code\": \"10000002\",\n    \"file_name\": \"test_101_img.jpg\",\n    \"document_type\": \"NRM\",\n    \"file_data\": \"iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAQMAAAD+wSzIAAAABlBMVEX///+/v7+jQ3Y5AAAADklEQVQI12P4AIX8EAgALgAD/aNpbtEAAAAASUVORK5CYII\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/fileupload/AOFIMG"
			},
			"response": []
		},
		{
			"name": "FATCA Image Upload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"file_name\": \"test_101_img.jpg\",\n    \"pan_no\": \"ABCPY1234M\",\n    \"file_data\": \"iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAQMAAAD+wSzIAAAABlBMVEX///+/v7+jQ3Y5AAAADklEQVQI12P4AIX8EAgALgAD/aNpbtEAAAAASUVORK5CYII\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/fileupload/FATCAIMG"
			},
			"response": []
		},
		{
			"name": "ELOG Upload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"client_code\": \"UCC1\",\n    \"primary_holder_pan\": \"ABCPD1234H\",\n    \"primary_holder_ip_address\": \"192.168.71.197\",\n    \"primary_holder_log_date\": \"17-JUL-24 16:10:39\",\n    \"second_holder_pan\": \"BBCPD1234G\",\n    \"second_holder_ip_address\": \"192.168.71.197\",\n    \"second_holder_log_date\": \"17-JUL-24 16:10:39\",\n    \"third_holder_pan\": \"CBCPD1234I\",\n    \"third_holder_ip_address\": \"192.168.71.197\",\n    \"third_holder_log_date\": \"17-JUL-24 16:10:39\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/ELOG"
			},
			"response": []
		},
		{
			"name": "POA Upload API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"client_code\": \"10000002\",\n    \"file_name\": \"test_101_img.jpg\",\n    \"file_data\": \"iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAQMAAAD+wSzIAAAABlBMVEX///+/v7+jQ3Y5AAAADklEQVQI12P4AIX8EAgALgAD/aNpbtEAAAAASUVORK5CYII\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/fileupload/POA_UPLOAD"
			},
			"response": []
		},
		{
			"name": "client cancel cheque upload",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"file_name\":\"image.png\",\n\"client_code\":\"500231\",\n\"account_no\":\"1\",\n\"ifsc\":\"SBIN0000018\",\n\"account_type\":\"CB\",\n\"file_data\":\"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/fileupload/CANCELCHEQUE"
			},
			"response": [
				{
					"name": "SUCCESS",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "memberId",
								"value": "{{member_code}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"file_name\":\"image.png\",\n\"client_code\":\"500231\",\n\"account_no\":\"1\",\n\"ifsc\":\"SBIN0000018\",\n\"account_type\":\"CB\",\n\"file_data\":\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/nsemfdesk/api/v2/fileupload/CANCELCHEQUE"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Date",
							"value": "Thu, 20 Mar 2025 05:55:07 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "https://testnsemf.njtechdesk.com"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, must-revalidate"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none"
						},
						{
							"key": "X-FRAME-OPTIONS",
							"value": "deny"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; script-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; style-src 'self' 'unsafe-inline' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in; child-src 'self'; img-src 'self' http://datatables.net https://datatables.net http://fonts.googleapis.com https://fonts.googleapis.com http://cdnjs.cloudflare.com https://cdnjs.cloudflare.com http://*.njtechdesk.com https://*.njtechdesk.com http://*.nse.co.in https://*.nse.co.in;"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"Cheque Uploaded Successfully.\",\n    \"status\": \"100\"\n}"
				}
			]
		},
		{
			"name": "Bank eLog Upload API",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"client_code\": \"K0281\",\n    \"account_no\": \"091774306\",\n    \"ifsc\": \"KKBK0000855\",\n    \"request_date\": \"17-07-24 16:10:39\",\n    \"beneficiary_name\": \"ASHOK C DOBARIYA\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/ELOGBANK"
			},
			"response": []
		},
		{
			"name": "Member fund allocation order wise report other than PA",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from_date\": \"10-11-2023\",\n    \"to_date\": \"10-11-2024\",\n    \"client_code\": \"\",\n    \"pg_bank_refno\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/MEMBER_FUND_ALLOCATION/ORDER_WISE"
			},
			"response": []
		},
		{
			"name": "Agewise/Bankwise orders funds received report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"date\": \"30-04-2024\",\n    \"client_code\": \"\",\n    \"settlement_type\": \"all\",\n    \"amc_code\": \"AXISMUTUALFUND_MF\",\n    \"scheme_code\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/MEMBER_FUND_ALLOCATION/AGE_WISE"
			},
			"response": []
		},
		{
			"name": "Redemption Payout Date Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"report_type\": \"Order Date\",\n    \"from_date\": \"25-04-2024\",\n    \"to_date\": \"25-04-2024\",\n    \"amc_code\": \"\",\n    \"order_id\": \"441160000046,441160000047\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/REDEMPTION_PAYOUT"
			},
			"response": []
		},
		{
			"name": "Redemption Statement Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_ids\": \"\",\n    \"from_date\": \"21-03-2024\",\n    \"to_date\": \"28-03-2024\",\n    \"order_type\": \"ALL\",\n    \"sub_order_type\": \"ALL\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/REDEMPTION_STATEMENT"
			},
			"response": []
		},
		{
			"name": "Allotement Statement Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_ids\": \"\",\n    \"from_date\": \"21-03-2024\",\n    \"to_date\": \"28-03-2024\",\n    \"order_type\": \"ALL\",\n    \"sub_order_type\": \"ALL\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/ALLOTMENT_STATEMENT"
			},
			"response": []
		},
		{
			"name": "2FA Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\",\n    \"Product_type\": \"PUR\",\n    \"product_id\": \"\",\n    \"client_code\": \"K123, P147\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/2FA"
			},
			"response": []
		},
		{
			"name": "Client Authorization report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\",\n    \"client_code\": \"K123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/CLIENT_AUTHORIZATION"
			},
			"response": []
		},
		{
			"name": "Order Lifecycle Report",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\",\n    \"Product_type\": \"PUR\",\n    \"product_id\": \"\",\n    \"client_code\": \"K123, P147\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/ORDER_LIFECYCLE"
			},
			"response": []
		},
		{
			"name": "FATCA Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"pan_pkern_no\": \"DDDPD1234D\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/FATCA_REPORT"
			},
			"response": []
		},
		{
			"name": "AOF Image Upload Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"client_code\": \"500231\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/AOF_IMAGE_UPLOAD_REPORT"
			},
			"response": []
		},
		{
			"name": "SIP Registration Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sip_reg_id\": \"202503281000001\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/SIP_REG_REPORT"
			},
			"response": []
		},
		{
			"name": "SIP Cancellation Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sip_reg_id\": \"202412231000078\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/SIP_CAN_REPORT"
			},
			"response": []
		},
		{
			"name": "SIP Installment Due Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sip_reg_id\": \"202412071000017\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/SIP_INST_DUE_REPORT"
			},
			"response": []
		},
		{
			"name": "SIP Topup Registration Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parent_sip_reg_id\": \"202503031000007\",\n    \"client_code\": \"NDNTUCC77\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/SIP_TOPUP_REPORT"
			},
			"response": []
		},
		{
			"name": "Stepup Registration Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sip_reg_id\": \"202503031000024\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/STEPUP_REG_REPORT"
			},
			"response": []
		},
		{
			"name": "XSIP Registration Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"xsip_reg_id\": \"202503281000001\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/XSIP_REG_REPORT"
			},
			"response": []
		},
		{
			"name": "XSIP Cancellation Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"xsip_reg_id\": \"202503281000001\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/XSIP_CAN_REPORT"
			},
			"response": []
		},
		{
			"name": "XSIP Installment Due Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"xsip_reg_id\": \"202503281000001\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/XSIP_INST_DUE_REPORT"
			},
			"response": []
		},
		{
			"name": "XSIP Topup Registration Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parent_xsip_reg_id\": \"202501221000001\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/XSIP_TOPUP_REPORT"
			},
			"response": []
		},
		{
			"name": "STP Registration Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stp_reg_id\": \"202503131000015\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/STP_REG_REPORT"
			},
			"response": []
		},
		{
			"name": "STP Cancellation Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stp_reg_id\": \"202308021000016\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/STP_CAN_REPORT"
			},
			"response": []
		},
		{
			"name": "STP Installment Due Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stp_reg_id\": \"202405291000014\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/STP_INST_DUE_REPORT"
			},
			"response": []
		},
		{
			"name": "SWP Registration Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"swp_reg_id\": \"202503181000006\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/SWP_REG_REPORT"
			},
			"response": []
		},
		{
			"name": "SWP Cancellation Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"swp_reg_id\": \"202308011050080\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/SWP_CAN_REPORT"
			},
			"response": []
		},
		{
			"name": "SWP Installment Due Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"swp_reg_id\": \"202412271000003\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/SWP_INST_DUE_REPORT"
			},
			"response": []
		},
		{
			"name": "Scheme Master & NAV Download API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"file_type\": \"SCH\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/MASTER_DOWNLOAD"
			},
			"response": []
		},
		{
			"name": "Client KYC Status Report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"pan_no\": \"BVYPD3824K\",\n    \"client_code\": \"5100004\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/CLIENT_KYC_REPORT"
			},
			"response": []
		},
		{
			"name": "KYC Status Check API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"pan_no\": \"BVYPD3824K\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/utility/KYC_CHECK"
			},
			"response": []
		},
		{
			"name": "KYC FRESH REGISTER API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amc_code\": \" AXF\",\n    \"pan_no\": \"BVYPD3824K\",\n    \"mobile\": \"9748975934\",\n    \"email\": \"abc@gmail.com\",\n    \"return_flag\": \"Y\",\n    \"client_callback_url\": \"Members callback URL\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/eKYC"
			},
			"response": []
		},
		{
			"name": "Purchase orders payment API - MANDATE",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"payment_mode\": \"MANDATE\",\n    \"client_code\": \"K0281\",\n    \"order_ids\": \"451200000005,451200000012,451190000015\",\n    \"mandate_id\": \"2025050100001\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/payments/purchase_payment"
			},
			"response": []
		},
		{
			"name": "Purchase orders payment API - CHEQUE",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"payment_mode\": \"CHEQUE\",\n    \"client_code\": \"K0281\",\n    \"order_ids\": \"451200000005,451200000012,451190000015\",\n    \"bank_account_no\": \"1234567890\",\n    \"ifsc\": \"KKBK0000123\",\n    \"cheque_no\": \"512\",\n    \"cheque_date\": \"01/05/2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/payments/purchase_payment"
			},
			"response": []
		},
		{
			"name": "Purchase orders payment API - UPI",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"payment_mode\": \"UPI\",\n    \"client_code\": \"K0281\",\n    \"order_ids\": \"451200000005,451200000012,451190000015\",\n    \"bank_account_no\": \"1234567890\",\n    \"ifsc\": \"KKBK0000123\",\n    \"vpa\": \"krushnakant@upi\",\n    \"callback_url\": \"https://member-site.com/upi-callback\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/payments/purchase_payment"
			},
			"response": []
		},
		{
			"name": "Purchase orders payment API - NETBANKING",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"payment_mode\": \"NETBANKING\",\n    \"order_ids\": \"451200000005,451200000012,451190000015\",\n    \"bank_account_no\": \"1234567890\",\n    \"ifsc\": \"KKBK0000123\",\n    \"callback_url\": \"https://member-site.com/nb-callback\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/payments/purchase_payment"
			},
			"response": []
		},
		{
			"name": "UPI payment status check API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nse_upi_ref_no\": \"123\",\n    \"client_code\": \"K0281\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/payments/upi_status_check"
			},
			"response": []
		},
		{
			"name": "SWP Cancellation Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}"
			},
			"response": []
		},
		{
			"name": "XSIP Pause Service API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"pause_data\": [\n        {\n            \"sip_reg_no\": \"202505011000001\",\n            \"effective_date\": \"15/05/2025\",\n            \"pause_flag\": \"Y\",\n            \"remarks\": \"requested by investtor\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/registration/XSIP_PAUSE"
			},
			"response": []
		},
		{
			"name": "Client Master report API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var api_key_member = postman.getEnvironmentVariable('api_key_member');",
							"// var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
							"// var separator = '|';",
							"// var random_number = Math.floor((Math.random() * 10000000000) + 1);",
							"// var plain_text = api_secret_user+separator+random_number;",
							"// console.log(\">>>> plain_text =\"+plain_text);",
							"// var AesUtil = function(keySize, iterationCount) {",
							"//   this.keySize = keySize / 32;",
							"//   this.iterationCount = iterationCount;",
							"// };",
							"",
							"// AesUtil.prototype.generateKey = function(salt, passPhrase) {",
							"//   var key = CryptoJS.PBKDF2(",
							"//       passPhrase, ",
							"//       CryptoJS.enc.Hex.parse(salt),",
							"//       { keySize: this.keySize, iterations: this.iterationCount });",
							"//   return key;",
							"// }",
							"",
							"// AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var encrypted = CryptoJS.AES.encrypt(",
							"//       plainText,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
							"// }",
							"",
							"// AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
							"//   var key = this.generateKey(salt, passPhrase);",
							"//   var cipherParams = CryptoJS.lib.CipherParams.create({",
							"//     ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
							"//   });",
							"//   var decrypted = CryptoJS.AES.decrypt(",
							"//       cipherParams,",
							"//       key,",
							"//       { iv: CryptoJS.enc.Hex.parse(iv) });",
							"//   return decrypted.toString(CryptoJS.enc.Utf8);",
							"// }",
							"",
							"",
							"",
							"",
							"// var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"// var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
							"",
							"// console.log(\"encrypted_password final iv =\"+ iv );",
							"// console.log(\"encrypted_password final salt =\"+ salt );",
							"",
							"// var aesUtil = new AesUtil(128, 1000);",
							"// //var ciphertext = aesUtil.encrypt(salt, iv, $('#key').text(), $scope.password);",
							"// var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
							"",
							"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
							"",
							"// var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
							"// var password = btoa(aesPassword);",
							"",
							"// console.log(\"encrypted_password final =\"+ password );",
							"// postman.setEnvironmentVariable('encrypted_password', password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "memberId",
						"value": "{{member_code}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"client_code\": \"K123\",\n    \"PAN\": \"BVYPED3824K\",\n    \"from_date\": \"21-01-2025\",\n    \"to_date\": \"28-01-2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/nsemfdesk/api/v2/reports/client_master_report"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": {
			"password": "{{encrypted_password}}",
			"username": "{{login_user_id}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// below header required for the production call",
					"pm.request.headers.add('Accept-Language', 'en-US');",
					"pm.request.headers.add('Referer', 'www.google.com');",
					"",
					"// encrypt logic",
					"var api_key_member = postman.getEnvironmentVariable('api_key_member');",
					"var api_secret_user = postman.getEnvironmentVariable('api_secret_user');",
					"var separator = '|';",
					"var random_number = Math.floor((Math.random() * 10000000000) + 1);",
					"var plain_text = api_secret_user+separator+random_number;",
					"// console.log(\">>>> plain_text =\"+plain_text);",
					"var AesUtil = function(keySize, iterationCount) {",
					"  this.keySize = keySize / 32;",
					"  this.iterationCount = iterationCount;",
					"};",
					"",
					"AesUtil.prototype.generateKey = function(salt, passPhrase) {",
					"  var key = CryptoJS.PBKDF2(",
					"      passPhrase, ",
					"      CryptoJS.enc.Hex.parse(salt),",
					"      { keySize: this.keySize, iterations: this.iterationCount });",
					"  return key;",
					"}",
					"",
					"AesUtil.prototype.encrypt = function(salt, iv, passPhrase, plainText) {",
					"  var key = this.generateKey(salt, passPhrase);",
					"  var encrypted = CryptoJS.AES.encrypt(",
					"      plainText,",
					"      key,",
					"      { iv: CryptoJS.enc.Hex.parse(iv) });",
					"  return encrypted.ciphertext.toString(CryptoJS.enc.Base64);",
					"}",
					"",
					"AesUtil.prototype.decrypt = function(salt, iv, passPhrase, cipherText) {",
					"  var key = this.generateKey(salt, passPhrase);",
					"  var cipherParams = CryptoJS.lib.CipherParams.create({",
					"    ciphertext: CryptoJS.enc.Base64.parse(cipherText)",
					"  });",
					"  var decrypted = CryptoJS.AES.decrypt(",
					"      cipherParams,",
					"      key,",
					"      { iv: CryptoJS.enc.Hex.parse(iv) });",
					"  return decrypted.toString(CryptoJS.enc.Utf8);",
					"}",
					"",
					"var iv = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
					"var salt = CryptoJS.lib.WordArray.random(128/8).toString(CryptoJS.enc.Hex);",
					"",
					"// console.log(\"encrypted_password final iv =\"+ iv );",
					"// console.log(\"encrypted_password final salt =\"+ salt );",
					"",
					"var aesUtil = new AesUtil(128, 1000);",
					"var ciphertext = aesUtil.encrypt(salt, iv, api_key_member , plain_text);",
					"",
					"// console.log(\"encrypted_password final ciphertext =\"+ ciphertext );",
					"",
					"var aesPassword = (iv + \"::\" + salt + \"::\" + ciphertext);",
					"var password = btoa(aesPassword);",
					"",
					"// console.log(\"encrypted_password final =\"+ password );",
					"postman.setEnvironmentVariable('encrypted_password', password);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}