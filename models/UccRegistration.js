const mongoose = require('mongoose');

const UccRegistrationSchema = new mongoose.Schema({
  client_code: {
    type: String,
    required: [true, 'Client code is required'],
    unique: true,
    index: true
  },
  primary_holder_first_name: String,
  primary_holder_middle_name: String,
  primary_holder_last_name: String,
  tax_status: String,
  gender: String,
  primary_holder_dob_incorporation: String,
  occupation_code: String,
  holding_nature: String,
  second_holder_first_name: String,
  second_holder_middle_name: String,
  second_holder_last_name: String,
  third_holder_first_name: String,
  third_holder_middle_name: String,
  third_holder_last_name: String,
  second_holder_dob: String,
  third_holder_dob: String,
  guardian_first_name: String,
  guardian_middle_name: String,
  guardian_last_name: String,
  guardian_dob: String,
  primary_holder_pan_exempt: String,
  second_holder_pan_exempt: String,
  third_holder_pan_exempt: String,
  guardian_pan_exempt: String,
  primary_holder_pan: String,
  second_holder_pan: String,
  third_holder_pan: String,
  guardian_pan: String,
  primary_holder_exempt_category: String,
  second_holder_exempt_category: String,
  third_holder_exempt_category: String,
  guardian_exempt_category: String,
  client_type: String,
  pms: String,
  default_dp: String,
  cdsl_dpid: String,
  cdslcltid: String,
  cmbp_id: String,
  nsdldpid: String,
  nsdlcltid: String,
  account_type_1: String,
  account_no_1: String,
  micr_no_1: String,
  ifsc_code_1: String,
  default_bank_flag_1: String,
  account_type_2: String,
  account_no_2: String,
  micr_no_2: String,
  ifsc_code_2: String,
  default_bank_flag_2: String,
  account_type_3: String,
  account_no_3: String,
  micr_no_3: String,
  ifsc_code_3: String,
  default_bank_flag_3: String,
  account_type_4: String,
  account_no_4: String,
  micr_no_4: String,
  ifsc_code_4: String,
  default_bank_flag_4: String,
  account_type_5: String,
  account_no_5: String,
  micr_no_5: String,
  ifsc_code_5: String,
  default_bank_flag_5: String,
  cheque_name: String,
  div_pay_mode: String,
  address_1: String,
  address_2: String,
  address_3: String,
  city: String,
  state: String,
  pincode: String,
  country: String,
  resi_phone: String,
  resi_fax: String,
  office_phone: String,
  office_fax: String,
  email: String,
  communication_mode: String,
  foreign_address_1: String,
  foreign_address_2: String,
  foreign_address_3: String,
  foreign_address_city: String,
  foreign_address_pincode: String,
  foreign_address_state: String,
  foreign_address_country: String,
  foreign_address_resi_phone: String,
  foreign_address_fax: String,
  foreign_address_off_phone: String,
  foreign_address_off_fax: String,
  indian_mobile_no: String,
  nominee_1_name: String,
  nominee_1_relationship: String,
  nominee_1_applicable: String,
  nominee_1_minor_flag: String,
  nominee_1_dob: String,
  nominee_1_guardian: String,
  nominee_2_name: String,
  nominee_2_relationship: String,
  nominee_2_applicable: String,
  nominee_2_dob: String,
  nominee_2_minor_flag: String,
  nominee_2_guardian: String,
  nominee_3_name: String,
  nominee_3_relationship: String,
  nominee_3_applicable: String,
  nominee_3_dob: String,
  nominee_3_minor_flag: String,
  nominee_3_guardian: String,
  primary_holder_kyc_type: String,
  primary_holder_ckyc_number: String,
  second_holder_kyc_type: String,
  second_holder_ckyc_number: String,
  third_holder_kyc_type: String,
  third_holder_ckyc_number: String,
  guardian_kyc_type: String,
  guardian_ckyc_number: String,
  primary_holder_kra_exempt_ref_no: String,
  second_holder_kra_exempt_ref_no: String,
  third_holder_kra_exempt_ref_no: String,
  guardian_exempt_ref_no: String,
  aadhaar_updated: String,
  mapin_id: String,
  paperless_flag: String,
  lei_no: String,
  lei_validity: String,
  mobile_declaration_flag: String,
  email_declaration_flag: String,
  nomination_opt: String,
  nomination_authentication: String,
  nominee_1_pan: String,
  nominee_1_guardian_pan: String,
  nominee_2_pan: String,
  nominee_2_guardian_pan: String,
  nominee_3_pan: String,
  nominee_3_guardian_pan: String,
  second_holder_email: String,
  second_holder_email_declaration: String,
  second_holder_mobile: String,
  second_holder_mobile_declaration: String,
  third_holder_email: String,
  third_holder_email_declaration: String,
  third_holder_mobile: String,
  third_holder_mobile_declaration: String,
  guardian_relation: String,
  filler1: String,
  filler2: String,
  filler3: String,
  consent_flag: String,
  reg_id: String,
  reg_status: String,
  reg_remark: String
}, { timestamps: true });

// Drop the old index if it exists
UccRegistrationSchema.pre('save', async function(next) {
  try {
    await this.collection.dropIndex('clientCode_1');
  } catch (err) {
    // Ignore error if index doesn't exist
  }
  next();
});

module.exports = mongoose.model('UccRegistration', UccRegistrationSchema); 